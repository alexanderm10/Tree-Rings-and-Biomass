#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
mu0 = allometries[[j]][i,"Bg0"]
mu1 = allometries[[j]][i,"Bg1"]
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
if(substr(plots[p],1,1)=="V"){
bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
} else {
temp <- allom.temp[,cols]
for(t in names(temp)){ # Convert biomass/tree to biomass/ha
temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
}
bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
}
}
}
for(i in 1:nrow(allometries[[1]])){
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# Species loop for calculating tree biomass
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
mu0 = allometries[[j]][i,"Bg0"]
mu1 = allometries[[j]][i,"Bg1"]
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
if(substr(plots[p],1,1)=="V"){
bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
} else {
temp <- allom.temp[,cols]
for(t in names(temp)){ # Convert biomass/tree to biomass/ha
temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
}
bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
}
}
}
library(dplR)
library(ggplot2)
se <- function(x){
sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}
# Run this script after the gap filling process scripts have been run
# For the NACP15 abstract run Tree_rw_gapfilled.csv
# load in the diameter reconstructions generated by Christy.  These are based upon gapfilled tree ring data using the fancy model.
g.filled.diam <- read.csv("gap_filled_dbh.recon.csv", header=T, row.names=1)
g.filled.diam <- g.filled.diam[,substr(names(g.filled.diam),1,1)=="V"]
summary(g.filled.diam)
# read in tree data
tree.data <- read.csv("TreeData.csv", header=T)
summary(tree.data)
#trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V" | substr(tree.data$PlotID, 1, 2)=="MM",]
trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V",]
summary(trees.use)
#quick plot
spag.plot(g.filled.diam)
plot.data <- read.csv("raw input files/DOE_plus_Valles.csv")
summary(plot.data)
##########################################################################
# Allometric Equations
##########################################################################
#Convert to biomass with the allometric equation
#using the PECAN generated bayesian equations
library(car)
# Getting rid of POTR for now for conceptual figure purposes
trees.use <- trees.use[!(trees.use$Species=="POTR"),]
summary(trees.use)
unique(trees.use$Species)
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='picea.sp'; 'PIPO'='pipo'; 'PSME'='psme'")
summary(trees.use)
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet
# will want to do general equations and pft level equations as well, but later
# log(AGB) = mu0 + mu1*log(DBH) --equaton form of PECAN allometrics
#allom.eq <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}
# dbh <- 1:50
# test <- allom.eq(mu0= -3.5185,
#                  mu1 = 2.6909,
#                  DBH = dbh)
#
# plot(test*.09 ~ dbh)
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# dbh=0 causes problems, so we're going to make those NA
g.filled.diam[g.filled.diam==0] <- 1e-6
min(g.filled.diam, na.rm=T)
summary(g.filled.diam)
dim(g.filled.diam)
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added
summary(bm.array[,,1])
for(i in 1:nrow(allometries[[1]])){
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# Species loop for calculating tree biomass
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
if(substr(plots[p],1,1)=="V"){
bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
} else {
temp <- allom.temp[,cols]
for(t in names(temp)){ # Convert biomass/tree to biomass/ha
temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
}
bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
}
}
}
#--------------------------------------------------
i=1
j=1
p=1
or(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}
allom.temp <- g.filled.diam
allom.temp[,] <- NA
g.filled.diam[g.filled.diam==0] <- 1e-6
min(g.filled.diam, na.rm=T)
summary(g.filled.diam)
dim(g.filled.diam)
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added
summary(bm.array[,,1])
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='pipo'; 'PIPO'='pipo'; 'PSME'='pipo'")
summary(trees.use)
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# dbh=0 causes problems, so we're going to make those NA
g.filled.diam[g.filled.diam==0] <- 1e-6
min(g.filled.diam, na.rm=T)
summary(g.filled.diam)
dim(g.filled.diam)
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added
summary(bm.array[,,1])
for(i in 1:nrow(allometries[[1]])){
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# Species loop for calculating tree biomass
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
if(substr(plots[p],1,1)=="V"){
bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
} else {
temp <- allom.temp[,cols]
for(t in names(temp)){ # Convert biomass/tree to biomass/ha
temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
}
bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
}
}
}
summary(bm.array[,,1])
# OFFENDER: VUF032; VUF026 is good
g.filled.diam[,c("VUF026","VUF032")]
### OUTSIDE of all LOOPs (iteration + species + plots)
# You should now have a 3-dimensional array with plots as columns, years as rows, and iterations as layers
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.sd <- apply(bm.array[,,], c(1,2), sd) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.se <- apply(bm.array[,,], c(1,2), se)
biom.mean <- as.data.frame(biom.mean)
names(biom.mean)<- plots
biom.sd <-as.data.frame(biom.sd)
names(biom.sd)<- c(paste(plots, "sd", sep="."))
biom.se <-as.data.frame(biom.se)
names(biom.se)<- c(paste(plots, "se", sep="."))
biom.valles <- as.data.frame(c(biom.mean, biom.sd, biom.se))
row.names(biom.valles) <- row.names(biom.mean)
summary(biom.valles)
head(biom.valles)
#save(biom.valles, file="biom.valles_cum.csv")
#---------------------------------------------------------------------
# This we did in a loop above to make it mroe flexible for the future
# (and we did it right this time)
#---------------------------------------------------------------------
# biom.valles.cum.dens <- biom.valles
#
# biom.valles.cum.dens$VLA <- biom.valles.cum.dens$VLA / 144/1000
# biom.valles.cum.dens$VLA.sd <- biom.valles.cum.dens$VLA.sd /144/1000
# biom.valles.cum.dens$VLA.se <- biom.valles.cum.dens$VLA.se /144/1000
#
# biom.valles.cum.dens$VLB <- biom.valles.cum.dens$VLB /624/1000
# biom.valles.cum.dens$VLB.sd <- biom.valles.cum.dens$VLB.sd /624/1000
# biom.valles.cum.dens$VLB.se <- biom.valles.cum.dens$VLB.se /624/1000
#
# biom.valles.cum.dens$VUA <- biom.valles.cum.dens$VUA /576/1000
# biom.valles.cum.dens$VUA.sd <- biom.valles.cum.dens$VUA.sd /576/1000
# biom.valles.cum.dens$VUA.se <- biom.valles.cum.dens$VUA.se /576/1000
#
# biom.valles.cum.dens$VUB <- biom.valles.cum.dens$VUB /576/1000
# biom.valles.cum.dens$VUB.sd <- biom.valles.cum.dens$VUB.sd /576/1000
# biom.valles.cum.dens$VUB.se <- biom.valles.cum.dens$VUB.se /576/1000
#
# summary(biom.valles.cum.dens)
# biom.valles.cum.dens$year <- as.factor(row.names(biom.valles.cum.dens))
# head(biom.valles.cum.dens)
# now we have biomass per m^2 for each plot with SD
#---------------------------------------------------------------------
#save(biom.valles.cum.dens, file="biom_valles_dum_m2.csv")
biom.valles.stack <- stack(biom.valles[1:4])
names(biom.valles.stack) <- c("Biom.Mean", "PlotID")
biom.valles.stack$Year <- as.numeric(paste(row.names(biom.valles)))
biom.valles.stack$Plot <- as.factor(substr(biom.valles.stack$PlotID, 3,3))
biom.valles.stack$Site <- as.factor(substr(biom.valles.stack$PlotID, 1,2))
summary(biom.valles.stack)
biom.valles.stack.sd <- stack(biom.valles[5:8])
names(biom.valles.stack.sd) <- c("Biom.SD", "PlotID")
biom.valles.stack.se <- stack(biom.valles[9:12])
names(biom.valles.stack.se) <- c("Biom.SE", "PlotID")
biom.valles.stack$Biom.SD <- biom.valles.stack.sd[,1]
biom.valles.stack$Biom.SE <- biom.valles.stack.se[,1]
summary(biom.valles.stack)
biom.valles.stack$Ribbon.max <- biom.valles.stack$Biom.Mean + biom.valles.stack$Biom.SD
biom.valles.stack$Ribbon.min <- biom.valles.stack$Biom.Mean - biom.valles.stack$Biom.SD
# biom.valles.stack$Ribbon.min <- ifelse(biom.valles.stack$Ribbon.min < 0, 0, biom.valles.stack$Ribbon.min)
# biom.valles.stack$Ribbon.max <- ifelse(biom.valles.stack$Ribbon.max > 100, 100, biom.valles.stack$Ribbon.max)
summary(biom.valles.stack)
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Biom.Mean-Biom.SD, ymax=Biom.Mean+Biom.SD, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
library(dplR)
library(ggplot2)
se <- function(x){
sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}
# Run this script after the gap filling process scripts have been run
# For the NACP15 abstract run Tree_rw_gapfilled.csv
# load in the diameter reconstructions generated by Christy.  These are based upon gapfilled tree ring data using the fancy model.
g.filled.diam <- read.csv("gap_filled_dbh.recon.csv", header=T, row.names=1)
g.filled.diam <- g.filled.diam[,substr(names(g.filled.diam),1,1)=="V"]
summary(g.filled.diam)
# read in tree data
tree.data <- read.csv("TreeData.csv", header=T)
summary(tree.data)
#trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V" | substr(tree.data$PlotID, 1, 2)=="MM",]
trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V",]
summary(trees.use)
#quick plot
spag.plot(g.filled.diam)
plot.data <- read.csv("raw input files/DOE_plus_Valles.csv")
summary(plot.data)
##########################################################################
# Allometric Equations
##########################################################################
#Convert to biomass with the allometric equation
#using the PECAN generated bayesian equations
library(car)
# Getting rid of POTR for now for conceptual figure purposes
trees.use <- trees.use[!(trees.use$Species=="POTR"),]
summary(trees.use)
unique(trees.use$Species)
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='pipo'; 'PIPO'='pipo'; 'PSME'='pipo'")
summary(trees.use)
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet
# will want to do general equations and pft level equations as well, but later
# log(AGB) = mu0 + mu1*log(DBH) --equaton form of PECAN allometrics
#allom.eq <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}
# dbh <- 1:50
# test <- allom.eq(mu0= -3.5185,
#                  mu1 = 2.6909,
#                  DBH = dbh)
#
# plot(test*.09 ~ dbh)
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# dbh=0 causes problems, so we're going to make those NA
g.filled.diam[g.filled.diam==0] <- 1e-6
min(g.filled.diam, na.rm=T)
summary(g.filled.diam)
dim(g.filled.diam)
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added
summary(bm.array[,,1])
#--------------------------------------------------
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC
# This is one big loop that goes through each layer of the 500 iterations
#--------------------------------------------------
for(i in 1:nrow(allometries[[1]])){
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# Species loop for calculating tree biomass
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
if(substr(plots[p],1,1)=="V"){
bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
} else {
temp <- allom.temp[,cols]
for(t in names(temp)){ # Convert biomass/tree to biomass/ha
temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
}
bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
}
}
}
#--------------------------------------------------
#bm.array[,,1]
summary(bm.array[,,1])
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.sd <- apply(bm.array[,,], c(1,2), quantile) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.se <- apply(bm.array[,,], c(1,2), se)
biom.mean <- as.data.frame(biom.mean)
names(biom.mean)<- plots
biom.sd <-as.data.frame(biom.sd)
names(biom.sd)<- c(paste(plots, "sd", sep="."))
biom.se <-as.data.frame(biom.se)
names(biom.se)<- c(paste(plots, "se", sep="."))
biom.valles <- as.data.frame(c(biom.mean, biom.sd, biom.se))
row.names(biom.valles) <- row.names(biom.mean)
summary(biom.valles)
head(biom.valles)
biom.valles <- as.data.frame(c(biom.mean, biom.sd, biom.se))
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.sd <- apply(bm.array[,,], c(1,2), quantile) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.se <- apply(bm.array[,,], c(1,2), se)
biom.mean <- as.data.frame(biom.mean)
names(biom.mean)<- plots
biom.sd <-as.data.frame(biom.sd)
names(biom.sd)<- c(paste(plots, "sd", sep="."))
biom.se <-as.data.frame(biom.se)
names(biom.se)<- c(paste(plots, "se", sep="."))
biom.valles <- as.data.frame(c(biom.mean, biom.sd, biom.se))
summary(bm.array[,,1])
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.sd <- apply(bm.array[,,], c(1,2), quantile) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.se <- apply(bm.array[,,], c(1,2), se)
biom.mean <- as.data.frame(biom.mean)
names(biom.mean)<- plots
biom.sd <-as.data.frame(biom.sd)
names(biom.sd)<- c(paste(plots, "sd", sep="."))
biom.se <-as.data.frame(biom.se)
names(biom.se)<- c(paste(plots, "se", sep="."))
summary(biom.mean)
summary(biom.sd)
biom.sd <- apply(bm.array[,,], c(1,2), sd) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
summary(biom.sd)
biom.sd <- apply(bm.array[,,], c(1,2), quantile, 0.025, 0.975) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
summary(biom.sd)
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.sd <- apply(bm.array[,,], c(1,2), quantile, 0.025, 0.975) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.se <- apply(bm.array[,,], c(1,2), se)
biom.mean <- as.data.frame(biom.mean)
names(biom.mean)<- plots
biom.sd <-as.data.frame(biom.sd)
names(biom.sd)<- c(paste(plots, "sd", sep="."))
biom.se <-as.data.frame(biom.se)
names(biom.se)<- c(paste(plots, "se", sep="."))
biom.valles <- as.data.frame(c(biom.mean, biom.sd, biom.se))
row.names(biom.valles) <- row.names(biom.mean)
summary(biom.valles)
head(biom.valles)
#save(biom.valles, file="biom.valles_cum.csv")
#---------------------------------------------------------------------
# This we did in a loop above to make it mroe flexible for the future
# (and we did it right this time)
#---------------------------------------------------------------------
# biom.valles.cum.dens <- biom.valles
#
# biom.valles.cum.dens$VLA <- biom.valles.cum.dens$VLA / 144/1000
# biom.valles.cum.dens$VLA.sd <- biom.valles.cum.dens$VLA.sd /144/1000
# biom.valles.cum.dens$VLA.se <- biom.valles.cum.dens$VLA.se /144/1000
#
# biom.valles.cum.dens$VLB <- biom.valles.cum.dens$VLB /624/1000
# biom.valles.cum.dens$VLB.sd <- biom.valles.cum.dens$VLB.sd /624/1000
# biom.valles.cum.dens$VLB.se <- biom.valles.cum.dens$VLB.se /624/1000
#
# biom.valles.cum.dens$VUA <- biom.valles.cum.dens$VUA /576/1000
# biom.valles.cum.dens$VUA.sd <- biom.valles.cum.dens$VUA.sd /576/1000
# biom.valles.cum.dens$VUA.se <- biom.valles.cum.dens$VUA.se /576/1000
#
# biom.valles.cum.dens$VUB <- biom.valles.cum.dens$VUB /576/1000
# biom.valles.cum.dens$VUB.sd <- biom.valles.cum.dens$VUB.sd /576/1000
# biom.valles.cum.dens$VUB.se <- biom.valles.cum.dens$VUB.se /576/1000
#
# summary(biom.valles.cum.dens)
# biom.valles.cum.dens$year <- as.factor(row.names(biom.valles.cum.dens))
# head(biom.valles.cum.dens)
# now we have biomass per m^2 for each plot with SD
#---------------------------------------------------------------------
#save(biom.valles.cum.dens, file="biom_valles_dum_m2.csv")
biom.valles.stack <- stack(biom.valles[1:4])
names(biom.valles.stack) <- c("Biom.Mean", "PlotID")
biom.valles.stack$Year <- as.numeric(paste(row.names(biom.valles)))
biom.valles.stack$Plot <- as.factor(substr(biom.valles.stack$PlotID, 3,3))
biom.valles.stack$Site <- as.factor(substr(biom.valles.stack$PlotID, 1,2))
summary(biom.valles.stack)
biom.valles.stack.sd <- stack(biom.valles[5:8])
names(biom.valles.stack.sd) <- c("Biom.SD", "PlotID")
biom.valles.stack.se <- stack(biom.valles[9:12])
names(biom.valles.stack.se) <- c("Biom.SE", "PlotID")
biom.valles.stack$Biom.SD <- biom.valles.stack.sd[,1]
biom.valles.stack$Biom.SE <- biom.valles.stack.se[,1]
summary(biom.valles.stack)
biom.valles.stack$Ribbon.max <- biom.valles.stack$Biom.Mean + biom.valles.stack$Biom.SD
biom.valles.stack$Ribbon.min <- biom.valles.stack$Biom.Mean - biom.valles.stack$Biom.SD
# biom.valles.stack$Ribbon.min <- ifelse(biom.valles.stack$Ribbon.min < 0, 0, biom.valles.stack$Ribbon.min)
# biom.valles.stack$Ribbon.max <- ifelse(biom.valles.stack$Ribbon.max > 100, 100, biom.valles.stack$Ribbon.max)
summary(biom.valles.stack)
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Biom.Mean-Biom.SD, ymax=Biom.Mean+Biom.SD, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012,])  + facet_grid(Plot ~ Site) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Ribbon.min, ymax=Ribbon.max, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +
scale_y_continuous(limits=c(0,1000)) #+
