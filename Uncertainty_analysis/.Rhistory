#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
# mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
# mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
mu0=allometries[[j]][i,"Bg0"]
mu1=allometries[[j]][i,"Bg1"]
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
if(substr(plots[p],1,1)=="V"){
bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
} else {
temp <- allom.temp[,cols]
for(n in names(temp)){ # Convert biomass/tree to biomass/ha
temp[,n] <- temp[,n] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
}
bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
}
}
}
#--------------------------------------------------
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC
# This is one big loop that goes through each layer of the 500 iterations
#--------------------------------------------------
for(i in 1:nrow(allometries[[1]])){
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# Species loop for calculating tree biomass
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
# mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
# mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
mu0=allometries[[j]][i,"Bg0"]
mu1=allometries[[j]][i,"Bg1"]
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
if(substr(plots[p],1,1)=="V"){
bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
} else {
temp <- allom.temp[,cols]
for(n in names(temp)){ # Convert biomass/tree to biomass/ha
temp[,n] <- temp[,n] * tree.data[tree.data$TreeID==n,"Density..stems.ha."]/10000
}
bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
}
}
}
summary(bm.array[,,1])
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.ci <- apply(bm.array[,,], c(1,2), quantile, c(0.025, 0.975)) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.mean <- as.data.frame(biom.mean)
names(biom.mean)<- plots
biom.lbound <- data.frame(biom.ci[1,,])
names(biom.lbound) <- paste(plots, "LB", sep=".")
biom.ubound <- data.frame(biom.ci[2,,])
names(biom.ubound) <- paste(plots, "UB", sep=".")
biom.all <- as.data.frame(c(biom.mean, biom.lbound, biom.ubound))
biom.all <- as.data.frame(c(biom.mean, biom.lbound, biom.ubound))
row.names(biom.all) <- row.names(biom.mean)
summary(biom.all)
head(biom.all)
save(biom.all, file="allsites_bm_recon.Rdata")
ci.vu <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VUF",
Mean = rowMeans(biom.all[,c("VUA", "VUB")]),
LB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.025),
UB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.975))
ci.vu <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VUF",
Mean = rowMeans(biom.all[,c("VUA", "VUB")]),
LB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.025),
UB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.975))
ci.vl <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VLF",
Mean = rowMeans(biom.all[,c("VLA", "VLB")]),
LB=apply(biom.all[,c("VLA", "VLB")],1, quantile, 0.025),
UB=apply(biom.all[,c("VLA", "VLB")],1, quantile, 0.975))
ci.vu <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VUF",
Mean = rowMeans(biom.all[,c("VUA", "VUB")]),
LB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.025),
UB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.975))
ci.vl <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VLF",
Mean = rowMeans(biom.all[,c("VLA", "VLB")]),
LB=apply(biom.all[,c("VLA", "VLB")],1, quantile, 0.025),
UB=apply(biom.all[,c("VLA", "VLB")],1, quantile, 0.975))
ci.mmf <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VLF",
Mean = rowMeans(biom.all[,c("MMA", "MMB", "MMC")]),
LB=apply(biom.all[,c("MMA", "MMB", "MMC")],1, quantile, 0.025),
UB=apply(biom.all[,c("MMA", "MMB", "MMC")],1, quantile, 0.975))
dens.uncert <- rbind(ci.vl, ci.vu, ci.mmf)
summary(dens.uncert)
ggplot(dens.uncert[dens.uncert$Year <=2011,]) + facet_grid(SiteID ~ .) +
geom_ribbon(aes(x=Year, ymin=LB, ymax=UB, fill=SiteID), alpha=0.5) +
geom_line(aes(x=Year, y=Mean, color=SiteID))
ci.vu <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VUF",
Mean = rowMeans(biom.all[,c("VUA", "VUB")]),
LB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.025),
UB=apply(biom.all[,c("VUA", "VUB")],1, quantile, 0.975))
ci.vl <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "VLF",
Mean = rowMeans(biom.all[,c("VLA", "VLB")]),
LB=apply(biom.all[,c("VLA", "VLB")],1, quantile, 0.025),
UB=apply(biom.all[,c("VLA", "VLB")],1, quantile, 0.975))
ci.mmf <- data.frame(Year=as.numeric(row.names(biom.all)), SiteID= "MMF",
Mean = rowMeans(biom.all[,c("MMA", "MMB", "MMC")]),
LB=apply(biom.all[,c("MMA", "MMB", "MMC")],1, quantile, 0.025),
UB=apply(biom.all[,c("MMA", "MMB", "MMC")],1, quantile, 0.975))
dens.uncert <- rbind(ci.vl, ci.vu, ci.mmf)
summary(dens.uncert)
ggplot(dens.uncert[dens.uncert$Year <=2011,]) + facet_grid(SiteID ~ .) +
geom_ribbon(aes(x=Year, ymin=LB, ymax=UB, fill=SiteID), alpha=0.5) +
geom_line(aes(x=Year, y=Mean, color=SiteID))
save(dens.uncert, file="allsites_density_uncertainty.Rdata")
biom.all.stack <- stack(biom.all[1:4])
names(biom.all.stack) <- c("Biom.Mean", "PlotID")
biom.all.stack$Year <- as.numeric(paste(row.names(biom.all)))
biom.all.stack$Plot <- as.factor(substr(biom.all.stack$PlotID, 3,3))
biom.all.stack$Site <- as.factor(substr(biom.all.stack$PlotID, 1,2))
summary(biom.all.stack)
biom.all.stack.lb <- stack(biom.all[5:8])
names(biom.all.stack.lb) <- c("Biom.LB", "PlotID")
biom.all.stack.ub <- stack(biom.all[9:12])
names(biom.all.stack.ub) <- c("Biom.UB", "PlotID")
biom.all.stack$Biom.LB <- biom.all.stack.lb[,1]
biom.all.stack$Biom.UB <- biom.all.stack.ub[,1]
summary(biom.all.stack)
summary(biom.all.stack)
save(biom.all.stack, file="all_bm_recon_stack.Rdata")
load("all_bm_recon_stack.Rdata")
library(ggplot2)
ggplot(data=biom.all.stack[biom.all.stack$Year<2012 & (biom.all.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +
ggtitle("all Caldera Lower (PIPO)")
ggplot(data=biom.all.stack[biom.all.stack$Year<2012 & (biom.all.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +
#ggplot(data=biom.all.stack[biom.all.stack$Year<2012 & (biom.all.stack$PlotID=="VUB"),])  + facet_grid(Plot ~ Site) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +
ggtitle("all Caldera Upper (MCON)")
# all.cum.plot<-
#pdf("all_Biomass_19March_Christy_ChojnackyOnly.pdf", height=8.5, width=11)
ggplot(data=biom.all.stack[biom.all.stack$Year<2012,])  + facet_grid(Site ~ .) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
ggplot(data=biom.all.stack[biom.all.stack$Year<2012,])  + facet_grid(Site ~ .) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
summary(biom.all.stack)
summary(biom.all.stack)
summary(biom.all)
biom.all
biom.all.stack <- stack(biom.all[1:7])
names(biom.all.stack) <- c("Biom.Mean", "PlotID")
biom.all.stack$Year <- as.numeric(paste(row.names(biom.all)))
biom.all.stack$Plot <- as.factor(substr(biom.all.stack$PlotID, 3,3))
biom.all.stack$Site <- as.factor(substr(biom.all.stack$PlotID, 1,2))
summary(biom.all.stack)
head(biom.all)
biom.all.stack.lb <- stack(biom.all[8:14])
names(biom.all.stack.lb) <- c("Biom.LB", "PlotID")
biom.all.stack.ub <- stack(biom.all[15:21])
names(biom.all.stack.ub) <- c("Biom.UB", "PlotID")
biom.all.stack$Biom.LB <- biom.all.stack.lb[,1]
biom.all.stack$Biom.UB <- biom.all.stack.ub[,1]
summary(biom.all.stack)
summary(biom.all.stack)
save(biom.all.stack, file="all_bm_recon_stack.Rdata")
load("all_bm_recon_stack.Rdata")
library(ggplot2)
ggplot(data=biom.all.stack[biom.all.stack$Year<2012,])  + facet_grid(Site ~ .) +
# plotting total site basal area
geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +
geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
library(car)
load("allometries_list.Rdata")
# Getting rid of POTR for now for conceptual figure purposes
#trees.use <- trees.use[!(trees.use$Species=="POTR"),]
summary(trees.use)
unique(trees.use$Species)
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='picea.sp'; 'PIPO'='pipo'; 'PSME'='psme'; 'POTR' = 'potr';
'ACSA' = 'acsa'; 'NYSY'= 'nysy' ; 'ASTR'='e.hard'; 'FAGR'='fagr'; 'FRAX'='fram'; 'LITU'='litu';
'POGR'='pogr'; 'QUAL'='qual'; 'QURU'='quru'; 'SAAL'='saal'; 'TIAM'='tiam'; 'ULRU'='e.hard'")
summary(trees.use)
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet
ross.density <- read.csv("raw input files/ross_density.csv", header=T)
summary(ross.density)
ross.density.site <- ross.density[substr(ross.density$PlotID, 1, 1)=="V",]
sites<- unique(ross.density.site$PlotID)
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}
# dbh <- 1:50
# test <- allom.eq(mu0= -3.5185,
#                  mu1 = 2.6909,
#                  DBH = dbh)
#
# plot(test*.09 ~ dbh)
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# dbh=0 causes problems, so we're going to make those NA
g.filled.diam[g.filled.diam==0] <- 1e-6
min(g.filled.diam, na.rm=T)
summary(g.filled.diam)
dim(g.filled.diam)
bm.array <- array(NA, dim=c(nrow(g.filled.diam), ncol(g.filled.diam), nrow(allometries[[1]])))
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added
dimnames(bm.array)[[2]] <- names(g.filled.diam)
# summary(bm.array[,,1])
dim(bm.array)
for(i in 1:nrow(allometries[[1]])){
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# Species loop for calculating tree biomass
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
# mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
# mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
mu0=allometries[[j]][i,"Bg0"]
mu1=allometries[[j]][i,"Bg1"]
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
dens <- ross.density.plot[ross.density.plot$PlotID==paste(plots[p]), "Density.Total..stems.m2."]
for(c in 1:length(cols)){
bm.array[,cols[c],i] <- allom.temp[,cols[c]]*dens #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
}
#bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "density.m2"] #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
#      } #else {
#       temp <- allom.temp[,cols]
#       for(n in names(temp)){ # Convert biomass/tree to biomass/ha
#         temp[,n] <- temp[,n] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
#       }
#       bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
#     }
}
}
ross.density
ross.density.plot
ross.density <- read.csv("raw input files/ross_density.csv", header=T)
ross.density.plot$PlotID <- recode(ross.density.plot$PlotID, "  'MCO.5'='VUA'; 'MCO.6'='VUB'; 'PPI.5'='VLA'; 'PPI.6'='VLB'")
summary(ross.density.plot)
ross.density.plot
ross.density <- read.csv("raw input files/ross_density.csv", header=T)
ross.density.plot <- ross.density
ross.density.plot$PlotID <- recode(ross.density.plot$PlotID, "  'MCO.5'='VUA'; 'MCO.6'='VUB'; 'PPI.5'='VLA'; 'PPI.6'='VLB'")
summary(ross.density.plot)
ross.density.plot
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}
# dbh <- 1:50
# test <- allom.eq(mu0= -3.5185,
#                  mu1 = 2.6909,
#                  DBH = dbh)
#
# plot(test*.09 ~ dbh)
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# dbh=0 causes problems, so we're going to make those NA
g.filled.diam[g.filled.diam==0] <- 1e-6
min(g.filled.diam, na.rm=T)
summary(g.filled.diam)
dim(g.filled.diam)
bm.array <- array(NA, dim=c(nrow(g.filled.diam), ncol(g.filled.diam), nrow(allometries[[1]])))
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added
dimnames(bm.array)[[2]] <- names(g.filled.diam)
# summary(bm.array[,,1])
dim(bm.array)
#--------------------------------------------------
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC
# This is one big loop that goes through each layer of the 500 iterations
#--------------------------------------------------
for(i in 1:nrow(allometries[[1]])){
allom.temp <- g.filled.diam
allom.temp[,] <- NA
# Species loop for calculating tree biomass
for(j in unique(trees.use$spp.allom)){
cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])
# Note: we'll have to make this a bit fancier in the future for species with mu0==0
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,
#                          mu1 = 2.6909,
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))
#                          DBH = g.filled.diam[,cols])
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),
#                               DBH = g.filled.diam[,cols])
# mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])
# mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])
mu0=allometries[[j]][i,"Bg0"]
mu1=allometries[[j]][i,"Bg1"]
allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])
}
# summing to the plot level
allom.temp[is.na(allom.temp)] <- 0
# biomass loop for summing trees to plots
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here
for(p in 1:length(plots)){
cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])
dens <- ross.density.plot[ross.density.plot$PlotID==paste(plots[p]), "Density.Total..stems.m2."]
for(c in 1:length(cols)){
bm.array[,cols[c],i] <- allom.temp[,cols[c]]*dens #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
}
#bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "density.m2"] #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)
#      } #else {
#       temp <- allom.temp[,cols]
#       for(n in names(temp)){ # Convert biomass/tree to biomass/ha
#         temp[,n] <- temp[,n] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000
#       }
#       bm.array[,p,i] <- rowSums(temp) #sum biomass/ha
#     }
}
}
summary(bm.array[,1:10,1])
mmf.mean <- apply(bm.array[,substr(dimnames(bm.array)[[2]],1,2)=="MM",], c(1,3), mean)
dim(mmf.mean)
summary(mmf.mean[,1:10])
vlf.mean <- apply(bm.array[,substr(dimnames(bm.array)[[2]],1,3)=="VLF",], c(1,3), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
dim(vlf.mean)
summary(vlf.mean[,1:10])
vuf.mean <- apply(bm.array[,substr(dimnames(bm.array)[[2]],1,3)=="VUF",], c(1,3), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
dim(vuf.mean)
summary(vuf.mean[,1:10])
mmf.mean <- apply(bm.array[,substr(dimnames(bm.array)[[2]],1,2)=="MM",], c(1,3), mean)
dim(mmf.mean)
summary(mmf.mean[,1:10])
mff.ci <- data.frame(Year=as.numeric(row.names(mmf.mean)), SiteID="MMF", Mean=rowMeans(mmf.mean), LB=apply(mmf.mean,1,quantile, 0.025), UB=apply(mmf.mean,1,quantile, 0.975))
summary(vuf.ci)
vlf.ci <- data.frame(Year=as.numeric(row.names(vlf.mean)), SiteID="VLF", Mean=rowMeans(vlf.mean), LB=apply(vlf.mean,1,quantile, 0.025), UB=apply(vlf.mean,1,quantile, 0.975))
summary(vlf.ci)
vuf.ci <- data.frame(Year=as.numeric(row.names(vuf.mean)), SiteID="VUF", Mean=rowMeans(vuf.mean), LB=apply(vuf.mean,1,quantile, 0.025), UB=apply(vuf.mean,1,quantile, 0.975))
summary(vuf.ci)
mff.ci <- data.frame(Year=as.numeric(row.names(mmf.mean)), SiteID="MMF", Mean=rowMeans(mmf.mean), LB=apply(mmf.mean,1,quantile, 0.025), UB=apply(mmf.mean,1,quantile, 0.975))
summary(mmf.ci)
mff.ci <- data.frame(Year=as.numeric(row.names(mmf.mean)), SiteID="MMF", Mean=rowMeans(mmf.mean), LB=apply(mmf.mean,1,quantile, 0.025), UB=apply(mmf.mean,1,quantile, 0.975))
mmf.ci <- data.frame(Year=as.numeric(row.names(mmf.mean)), SiteID="MMF", Mean=rowMeans(mmf.mean), LB=apply(mmf.mean,1,quantile, 0.025), UB=apply(mmf.mean,1,quantile, 0.975))
summary(mmf.ci)
allom.uncert <- data.frame(rbind(vlf.ci, vuf.ci, mmf.ci))
ggplot(allom.uncert[allom.uncert$Year<=2011,]) + facet_grid(SiteID ~.) +
geom_ribbon(aes(x=Year, ymin=LB, ymax=UB, fill=SiteID), alpha=0.5) +
geom_line(aes(x=Year, y=Mean, color=SiteID))
save(allom.uncert, file="allsites_allometry_uncertainty.Rdata")
summary(allom.uncer)
summary(allom.uncert)
library(ggplot2)
##############################################################################
# wanting to make a composite figure showing the contribution of uncertainties
##############################################################################
# loading in the various datasets that will be needed
# allometric uncertainty of BM at the site level
load("valles_allometry_uncertainty.Rdata")
allom.uncert$LB.dev <- allom.uncert$Mean - allom.uncert$LB
allom.uncert$UB.dev <-  allom.uncert$UB - allom.uncert$Mean
allom.uncert <- allom.uncert[order(allom.uncert$Year),]
allom.uncert <- allom.uncert[order(allom.uncert$SiteID),]
summary(allom.uncert)
# density BM--uses mean allometric eqtn. and accounts for differences in density with just ROSS plots
load("valles_density_uncertainty.Rdata")
dens.uncert$LB.dev <- dens.uncert$Mean - dens.uncert$LB
dens.uncert$UB.dev <-  dens.uncert$UB - dens.uncert$Mean
dens.uncert <- dens.uncert[order(dens.uncert$Year),]
dens.uncert <- dens.uncert[order(dens.uncert$SiteID),]
summary(dens.uncert)
# mortality Uncertainty of BM at the site level
load("valles_mortality_uncertainty.Rdata")
dummy.year <- data.frame(Year=dens.uncert$Year, SiteID=dens.uncert$SiteID)
mort.uncert <- merge(mort.uncert, dummy.year, all.x=T, all.y=T)
mort.uncert <- mort.uncert[order(mort.uncert$Year),]
mort.uncert <- mort.uncert[order(mort.uncert$SiteID),]
mort.uncert$LB.dev <- dens.uncert$Mean - mort.uncert$LB
mort.uncert$UB.dev <-  mort.uncert$UB - dens.uncert$Mean
summary(mort.uncert)
# uncertainty in the increment
load("dated_v_all_valles.inc.stack.Rdata")
valles.inc.stack <- valles.inc.stack[valles.inc.stack$group=="all",]
valles.inc.stack <- valles.inc.stack[order(valles.inc.stack$Year),]
valles.inc.stack <- valles.inc.stack[order(valles.inc.stack$SiteID),]
valles.inc.stack$LB.dev <- valles.inc.stack$Mean.inc - valles.inc.stack$inc.LB
valles.inc.stack$UB.dev <- valles.inc.stack$inc.UB - valles.inc.stack$Mean.inc
summary(valles.inc.stack)
#combine the different areas into one figure
#
# Order of operations
# 1)variability in the tree rings
# 2)allometric uncertainty
# 3)density uncertainty
# 4)mortality adustment
# Creating a dataframe that adds the uncertainties together
# will use the mean from the allometric uncertainty as our root
# doing a test first with just VLF
bm.final <- data.frame(Year=unique(allom.uncert$Year), SiteID=allom.uncert$SiteID,
Base=allom.uncert[,"Mean"])
bm.final$LB.inc <- bm.final$Base - valles.inc.stack[,"LB.dev"]
bm.final$UB.inc <- bm.final$Base + valles.inc.stack[,"UB.dev"]
bm.final$LB.inc <- ifelse(bm.final$LB.inc<0, 0, bm.final$LB.inc)
bm.final$LB.allom <- bm.final$LB.inc - allom.uncert[, "LB.dev"]
bm.final$UB.allom <- bm.final$UB.inc + allom.uncert[, "UB.dev"]
bm.final$LB.allom <- ifelse(bm.final$LB.allom<0, 0, bm.final$LB.allom)
bm.final$LB.dens <- bm.final$LB.allom - dens.uncert[, "LB.dev"]
bm.final$UB.dens <- bm.final$UB.allom + dens.uncert[, "UB.dev"]
bm.final$LB.dens <- ifelse(bm.final$LB.dens<0, 0, bm.final$LB.dens)
bm.final$LB.mort <- bm.final$LB.dens - mort.uncert[, "LB.dev"]
bm.final$UB.mort <- bm.final$UB.dens + mort.uncert[, "UB.dev"]
bm.final$LB.mort <- ifelse(bm.final$LB.dens<0, 0, bm.final$LB.dens)
summary(bm.final)
ggplot(bm.final[bm.final$Year >= 1925 & bm.final$Year <=2011,]) + facet_grid(SiteID ~ .) +
geom_line(aes(x=Year, y=Base), size=1.5, color="black") +
#1) Increment Uncertainty
geom_ribbon(aes(x=Year, ymin=LB.inc, ymax=UB.inc), alpha=0.5, fill="green3") +
#2) Allometric Uncertainty -- separate for upper & lower to make things clearer
geom_ribbon(aes(x=Year, ymin=LB.allom, ymax=LB.inc), alpha=0.5, fill="blue") +
geom_ribbon(aes(x=Year, ymin=UB.allom, ymax=UB.inc), alpha=0.5, fill="blue") +
#3) Density Uncertainty -- separate for upper & lower to make things clearer
geom_ribbon(aes(x=Year, ymin=LB.dens, ymax=LB.allom), alpha=0.5, fill="red") +
geom_ribbon(aes(x=Year, ymin=UB.dens, ymax=UB.allom), alpha=0.5, fill="red") +
#4) Mortality Uncertainty -- separate for upper & lower to make things clearer
geom_ribbon(aes(x=Year, ymin=LB.mort, ymax=LB.dens), alpha=0.5, fill="orange2") +
geom_ribbon(aes(x=Year, ymin=UB.mort, ymax=UB.dens), alpha=0.5, fill="orange2") +
# Reiterate mean line for clarity
geom_line(aes(x=Year, y=Base), size=1.5, color="black") +
labs(title= "Stacked Uncertainties", x="Year", y="Aboveground Biomass (kg/m2)")
summary(allom.uncert)
summary(allom.uncert[allom uncert$SiteID=="VLF"])
summary(allom.uncert[allom.uncert$SiteID=="VLF"])
summary(allom.uncert[allom.uncert$SiteID=="VLF",])
summary(allom.uncert[allom.uncert$SiteID=="VUF",])
summary(dens.uncert[dens.uncert$SiteID=="VLF",])
summary(mort.uncert[mort.uncert$SiteID=="VLF",])
summary(mort.uncert[mort.uncert$SiteID=="VUF",])
summary(valles.inc.stack[valles.inc.stack$SiteID=="VLF",])
summary(allom.uncert[allom.uncert$SiteID=="VLF",])
summary(allom.uncert[allom.uncert$SiteID=="VUF",])
summary(allom.uncert[allom.uncert$SiteID=="VLF",])
summary(allom.uncert[allom.uncert$SiteID=="VUF",])
summary(allom.uncert[allom.uncert$SiteID=="VLF",])
summary(allom.uncert[allom.uncert$SiteID=="VUF",])
summary(dens.uncert[dens.uncert$SiteID=="VLF",])
summary(dens.uncert[dens.uncert$SiteID=="VUF",])
summary(mort.uncert[mort.uncert$SiteID=="VLF",])
summary(mort.uncert[mort.uncert$SiteID=="VUF",])
summary(valles.inc.stack[valles.inc.stack$SiteID=="VLF",])
summary(valles.inc.stack[valles.inc.stack$SiteID=="VUF",])
summary(allom.uncert[allom.uncert$SiteID=="VLF",])
summary(allom.uncert[allom.uncert$SiteID=="VUF",])
summary(bm.final)
summary(bm.final[bm.final$SiteID=="VLF",])
summary(bm.final[bm.final$SiteID=="VLF",])
summary(bm.final[bm.final$SiteID=="VLF",])
summary(bm.final[bm.final$SiteID=="VUF",])
51.02-44.31
88.92-16.65
38.85-15.63
51.07/72.27
23.22/24.62
24.62/23.22
1.21+4
5.21/51.027
3.09+.63
3.72/24.62
17.2514+0.9
18.1514/51.027
5.95+6.39
6.35+8.14
27.92*2
2.32*2
0.9+17.25
0.44+8.42
0.63+3.09
12.34/72.27
14.49/23.22
55.84/72.27
4.64/23.22
18.15/72.27
8.86/23.22
5.21/72.27
3.72/23.22
16+40+20
62+17
8.14+2.32+8.42+3.09
summary(bm.final[bm.final$SiteID=="VLF",])
