tree.data3$fill.year <- ifelse(is.na(tree.data3$Pith), tree.data3$Year.sample-tree.data3$upr, tree.data3$Pith)
summary(tree.data3)
# Merging this back into a data frame that contains info for all the trees we're modeling right now
tree.data.model <- merge(tree.data3, tree.data2, all.x=T, all.y=T)
summary(tree.data.model)
summary(tree.data.model$Species)
#---------------------
# QUESTION: what to do about the species with no pith estimates?
#	For now, I'm just going to do a species-naive fit within each plot
#---------------------
dbh.age.plot <- lm(Age ~ DBH..cm.*PlotID-1, data=tree.data.model)
summary(dbh.age.plot)
age.pi.plot <- predict(dbh.age.plot, newdata= tree.data.model, interval="predict")
summary(age.pi.plot)
dim(age.pi.plot); dim(tree.data.model)
summary(tree.data.model)
# Filling missing fill.year with one caluclated form age.pi.plot fill
tree.data.model[is.na(tree.data.model$fill.year),"fill.year"] <- tree.data.model[is.na(tree.data.model$fill.year),"Year.sample"] - age.pi.plot[which(is.na(tree.data.model$fill.year)),3]
summary(tree.data.model)
#---------------------
# ---------------------------------------
# ORIGINAL USAGE: Provide dummy variable
# 2) fill the modeling window with non-0 values... perhaps mean growth from last decade or past observed trend?
#		QUESTION: What dummy value do we want to give it?
#			For now, I'm going to do the mean of the last decade
# ---------------------------------------
# summary(ring.data)
# ring.data$RW0 <- ring.data$RW # Making a column of dummy-filled ring widths
# for(i in unique(ring.data$TreeID)){
# #------------------------------
# #year.fill = the oldest year to fill based on above step (prediction interval, size-species-Site relationships)
# #year.min = the oldest year measured
# #rw.fill = the dummy ring width to feed the model; right now this is for the last measured decade
# #			-- (yr.min + 10) means the 10 years following year.min (
# #			-- e.g. if min year = 1950, we'll fill with the mean value from 1950:1960
# #------------------------------
# yr.fill <- tree.data.model[tree.data.model$TreeID==i,"fill.year"]
# yr.min <- min(ring.data[ring.data$TreeID==i & !is.na(ring.data$RW), "Year"])
# rw.fill <- mean(ring.data[ring.data$TreeID==i & ring.data$Year>=yr.min & ring.data$Year<=(yr.min+10), "RW"],na.rm=T)
# #------------------------------
# #------------------------------
# # The actual insertion of the dummy fil value into the fill range
# #------------------------------
# ring.data[ring.data$TreeID==i & is.na(ring.data$RW) & ring.data$Year>=yr.fill, "RW0"] <- rw.fill
# #------------------------------
# }
# summary(ring.data)
# # ---------------------------------------
# ---------------------------------------
# New Usage: delete NAs for years way outside what we think we should be fitting
# 2b) I still don't think we want to be fi
# ---------------------------------------
summary(tree.data.model)
summary(ring.data)
dim(ring.data)
for(i in unique(ring.data$TreeID)){
#------------------------------
#year.fill = the oldest year to fill based on above step (prediction interval, size-species-Site relationships)
#------------------------------
yr.fill <- tree.data.model[tree.data.model$TreeID==i,"fill.year"]
#------------------------------
#------------------------------
# The actual insertion of the dummy fil value into the fill range
#------------------------------
ring.data <- ring.data[!(ring.data$TreeID==i & ring.data$Year<yr.fill),]
#------------------------------
}
summary(ring.data)
dim(ring.data)
summary(ring.data$Species)
summary(ring.data$PlotID)
# ################################################################
# ################################################################
# RUNNING THE GAMM!!
# ################################################################
# ################################################################
# A generalized additive mixed model (gamm) allows us to fit splines in a mixed model context
# we can let these splines vary by tree which essentially detrends the core
# here's we're using our dummy-filled ring widths as a response so that the spline will fit over the whole time period of interest
# NOTE: for this to work with canopy class, we'll need to figure out what to do about dead trees
# NOTE: Right now this is set up for each Site separately.  If you want to borrow strength from other Sites to help gap fill certain species, run them together
# ################################################################
# ----------------------------------------------------------------
# Gapfilling trees for which we have at least some measurements
# ----------------------------------------------------------------
# ---------------------------------------
# Morgan Monroe Forest
# ---------------------------------------
ring.data.mmf <- ring.data[substr(ring.data$PlotID,1,2)=="MM",]
ring.data.mmf <- droplevels(ring.data.mmf)
# Note: the log link with the gaussian family to prevent fitting negative values requires that you can't actually have 0 growth so we're going to make it really really small instead
ring.data.mmf$RW <- ifelse(ring.data.mmf$RW==0, 1e-6, ring.data.mmf$RW)
summary(ring.data.mmf)
gamm.mmf <- gamm(log(RW) ~ s(Year, bs="cs", k=3, by=TreeID) + DBH..cm., random=list(Species=~1, Site=~1, PlotID=~1), data= ring.data.mmf, na.action=na.omit)
# Saving the GAMM From above so we can load it without having to refit it
save(gamm.mmf, file="GapFilling_gamm_mmf_02.2015.rData")
# # This isn't a great way of doing it, but it'll let you see the splines for each of the cores
# par(mfrow=c(4,5), mar=c(2,2,0,0)+0.1)
# plot(gamm.mmf$gam)
# Making Predicted ring widths
ring.data.mmf$RW.modeled <- exp(predict(gamm.mmf, ring.data.mmf))
summary(ring.data.mmf)
write.csv(ring.data.valles, "GapFilling_MMF_Measured_Filled.csv", row.names=F)
# Graphing of the modeled rings we will use to fill the data (note this isn't truncating ones that are past where we think pith actually is)
pdf("gamm_gapfill_mmf.pdf", height=7.5, width=10)
ggplot() + facet_wrap(~Species) +
geom_path(aes(x=Year, y=RW, color=Species), data=ring.data.mmf, size=0.5) +
geom_point(aes(x=Year, y=RW.modeled), ring.data.mmf[is.na(ring.data.mmf$RW),], size=0.5) +
scale_y_continuous(limits=c(0,1.25)) +
theme_bw()
dev.off()
# ---------------------------------------
# ---------------------------------------
# Valles Caldera (Upper & Lower modeled together)
# ---------------------------------------
ring.data.valles <- ring.data[substr(ring.data$PlotID,1,2)=="VL" | substr(ring.data$PlotID,1,2)=="VU",]
ring.data.valles <- droplevels(ring.data.valles)
ring.data.valles$RW <- ifelse(ring.data.valles$RW==0, 1e-6, ring.data.valles$RW)
summary(ring.data.valles)
gamm.valles <- gamm(log(RW) ~ s(Year, bs="cs", k=3, by=TreeID) + DBH..cm., random=list(Species=~1, Site=~1, PlotID=~1), data= ring.data.valles, na.action=na.omit)
summary(ring.data.mmf)
ring.data.mmf$RW.modeled <- exp(predict(gamm.mmf, ring.data.mmf))
update.packages()
ring.data.mmf <- ring.data[substr(ring.data$PlotID,1,2)=="MM",]
ring.data.mmf <- droplevels(ring.data.mmf)
# Note: the log link with the gaussian family to prevent fitting negative values requires that you can't actually have 0 growth so we're going to make it really really small instead
ring.data.mmf$RW <- ifelse(ring.data.mmf$RW==0, 1e-6, ring.data.mmf$RW)
summary(ring.data.mmf)
min(ring.data.mmf$RW, na.rm=T)
par(mfrow=c(4,5), mar=c(2,2,0,0)+0.1)
plot(gamm.mmf$gam)
library(nlme)
gamm.mmf <- gamm(log(RW) ~ s(Year, bs="cs", k=3, by=TreeID) + DBH..cm., random=list(Species=~1, Site=~1, PlotID=~1), data= ring.data.mmf, na.action=na.omit)
# Saving the GAMM From above so we can load it without having to refit it
save(gamm.mmf, file="GapFilling_gamm_mmf_02.2015.rData")
# # This isn't a great way of doing it, but it'll let you see the splines for each of the cores
# par(mfrow=c(4,5), mar=c(2,2,0,0)+0.1)
# plot(gamm.mmf$gam)
# Making Predicted ring widths
ring.data.mmf$RW.modeled <- exp(predict(gamm.mmf, ring.data.mmf))
summary(ring.data.mmf)
write.csv(ring.data.mmf, "GapFilling_MMF_Measured_Filled.csv", row.names=F)
marcy.pipo <- read.csv("marcy_ppine_2013.csv", header=T)
marcy.pipo <- read.csv("marcy_ppine_2013.csv", header=T)
marcy.pipo <- read.csv("~raw input files/marcy_ppine_2013.csv", header=T)
marcy.pipo <- read.csv("~raw input files\marcy_ppine_2013.csv", header=T)
marcy.pipo <- read.csv("~raw input files//marcy_ppine_2013.csv", header=T)
marcy.pipo <- read.csv("raw input files/marcy_ppine_2013.csv", header=T)
marcy.mcon <- read.csv("raw input files/marcy_mc0on_2012.csv", header=T)
marcy.mcon <- read.csv("raw input files/marcy_mcon_2012.csv", header=T)
summary(marcy.pipo)
hist(marcy.pipo$DBH_1)
hist(marcy.mcon$DBH_1)
hist(marcy.pipo$DBH_1)
hist(marcy.pipo$DBH_1, breaks =5)
hist(marcy.pipo$DBH_1, breaks =10)
hist(marcy.pipo$DBH_1, breaks =15)
hist(marcy.pipo$DBH_1, breaks =20)
hist(marcy.mcon$DBH_1, breaks = 20)
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", headter=T)
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", header=T)
summary(ross.trees)
ross.pipo <- ross.trees[ross.trees$PlotID==VLF]
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,2=="VU"]
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,2=="VU")]
ross.pipo <- ross.trees[,substr(ross.trees$PlotID,1,2=="VU")]
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,2=="VU"),]
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,2)=="VL",]
ross.mcon <- ross.trees[substr(ross.trees$PlotID,1,2)=="VU",]
summary(ross.pipo)
summary(ross.mcon)
summary(marcy.pipo)
summary(ross.pipo)
dbh.bins1 <- seq(0, max(ross.pipo$DBH..cm., na.rm=T), 2)
dbh.bins1 <- seq(0, max(ross.pipo$DBH..cm., na.rm=T), 2)
dbh.bins2 <- seq(0, max(ross.mcon$DBH..cm., na.rm=T), 2)
dbh.bins3 <- seq(0, max(marcy.pipo$DBH_1, na.rm=T), 2)
dbh.bins4 <- seq(0, max(marcy.mcon$DBH_1, na.rm=T), 2)
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill=spp) + facet_grid(site ~ .) +
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(),
panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12),
axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") +
ggtitle("Size Distribution PIPO Valles Caldera")
library(ggplot2)
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill=spp) + facet_grid(site ~ .) +
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(),
panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12),
axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") +
ggtitle("Size Distribution PIPO Valles Caldera") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill="red")
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(),
panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12),
axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") +
ggtitle("Size Distribution PIPO Valles Caldera") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(),
panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12),
axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") +
ggtitle("Size Distribution PIPO Valles Caldera") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(),
panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12),
axis.text.y=element_text(color="black", size=12)) + scale_x_continuous(name="DBH") +
ggtitle("Size Distribution PIPO Valles Caldera") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(),
panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12),
axis.text.y=element_text(color="black", size=12)) + #scale_x_continuous(name="DBH") +
ggtitle("Size Distribution PIPO Valles Caldera") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(),
panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12),
axis.text.y=element_text(color="black", size=12)) + scale_x_continuous(name="DBH") + ggtitle("Size Distribution PIPO Valles Caldera") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
summary(ross.pipo)
ross.pipo <- ross.trees["TreeID", "Species", "DBH..cm."]
ross.pipo <- ross.trees[c("TreeID", "Species", "DBH..cm."),]
names(ross.pipo) <- c("tree.id", "species", "dbh")
summary(ross.pipo)
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", header=T)
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,2)=="VL",]
ross.pipo <- ross.trees[c("TreeID", "Species", "DBH..cm."),]
names(ross.pipo) <- c("tree.id", "species", "dbh")
summary(ross.pipo)
marcy.pipo <- read.csv("raw input files/marcy_ppine_2013.csv", header=T)
marcy.mcon <- read.csv("raw input files/marcy_mcon_2012.csv", header=T)
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", header=T)
summary(ross.trees)
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,2)=="VL",]
ross.mcon <- ross.trees[substr(ross.trees$PlotID,1,2)=="VU",]
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) + scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous("DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(labels="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)+
geom_bar(fill="red", colour="black")+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)+
geom_bar(fill="red", colour="black")+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)+
geom_histogram(fill="red")+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill="red")+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill=~)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
summary(ross.pipo)
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill= "PlotID")+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill= PlotID)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=DBH..cm., data=ross.pipo, geom="histogram", breaks=dbh.bins1, fill= PlotID)+
qplot(x=DBH_1, data=marcy.pipo, geom="histogram", breaks=dbh.bins2,)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
marcy.pipo <- read.csv("raw input files/marcy_ppine_2013.csv", header=T)
marcy.mcon <- read.csv("raw input files/marcy_mcon_2012.csv", header=T)
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", header=T)
summary(ross.trees)
ross.valles <- ross.trees[substr(ross.trees$PlotID,1,1)=="V",]
summary(ross.valles)
ross.valles<- ross.valles[,c("TreeID", "Plot ID", "Species","DBH..cm.", "Density")]
ross.valles<- ross.valles[c("TreeID", "Plot ID", "Species","DBH..cm.", "Density"),]
summary(ross.valles)
ross.valles<- ross.valles[,c("TreeID", "Plot ID", "Species","DBH..cm.", "Density")]
ross.valles<- ross.valles[,c("TreeID", "PlotID", "Species","DBH..cm.", "Density")]
ross.valles<- ross.valles[,c("TreeID", "PlotID", "Species","DBH..cm.", "Density..stems.h")]
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", header=T)
summary(ross.trees)
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", na.strings=c("", "NA", "#VALUE!", "*"),header=T)
summary(ross.trees)
ross.valles <- ross.trees[substr(ross.trees$PlotID,1,1)=="V",]
summary(ross.valles)
ross.valles<- ross.valles[,c("TreeID", "PlotID", "Species","DBH..cm.", "Density..stems.ha.")]
names(ross.valles)<- c("tree.id", "plot.id", "species", "dbh", "density")
summary(ross.valles)
dbh.bins1 <- seq(0, max(ross.valles$dbh., na.rm=T), 2)
dbh.bins1 <- seq(0, max(ross.valles$dbh., na.rm=T), 2)
dbh.bins1 <- seq(0, max(ross.valles$dbh, na.rm=T), 2)
qplot(x=dbh, data=ross.valles, geom="histogram", breaks=dbh.bins1, fill= plot.id)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=dbh, data=ross.valles, geom="histogram", breaks=dbh.bins1, facet= plot.id)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=dbh, data=ross.valles, geom="histogram", breaks=dbh.bins1, facet= "plot.id")+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=dbh, data=ross.valles, geom="histogram", breaks=dbh.bins1, facet_grid(plot.id ~ .))+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=dbh, data=ross.valles, geom="histogram", breaks=dbh.bins1)+
facet_grid(plot.id ~ .)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
marcy.valles<- merge(marcy.pipo, marcy.mcon, by= intersect(names(y)))
marcy.valles<- merge(marcy.pipo, marcy.mcon, by= intersect(names(x)))
marcy.valles<- merge(marcy.pipo, marcy.mcon)
marcy.valles<- merge(marcy.pipo, marcy.mcon, all.x=T, all.y=T)
summary(marcy.valles)
summary(ross.valles)
ross.valles$site<- ifelse(ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL"], Ross.PPINE, Ross.MCON)
ross.valles$site<- ifelse(ross.valles[,substr(ross.valles$plot.id, 1, 2)=="VL"], Ross.PPINE, Ross.MCON)
ross.valles$site<- ifelse(ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL",], Ross.PPINE, Ross.MCON)
ross.valles$site<- ifelse(,ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL"], Ross.PPINE, Ross.MCON)
ross.valles$site<- ifelse(,ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL"], "Ross.PPINE", "Ross.MCON")
ross.valles$site<- ifelse(ross.valles[,substr(ross.valles$plot.id, 1, 2)=="VL"], "Ross.PPINE", "Ross.MCON")
ross.valles$site<- ifelse(ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL",], "Ross.PPINE", "Ross.MCON")
ifelse(ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL",], "Ross.PPINE", "Ross.MCON")
ross.valles$site<- ifelse(ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL",], ross.valles$site=="Ross.PPINE", ross.valles$site=="Ross.MCON")
ross.valles$site<- ifelse(ross.valles[substr(ross.valles$plot.id, 1, 2)=="VL",], Ross.PPINE, Ross.MCON)
summary(marcy.valles)
marcy.valles <- marcy.valles[,c("Site", "Tree_Tag_Number","Species", "DBH_1", )]
summary(marcy.valles)
marcy.valles <- marcy.valles[,c("Site", "Tree_Tag_Number","Species", "DBH_1")]
summary(marcy.valles)
names(marcy.valles)<- c("site", "tree.id", "species", "dbh")
summary(marcy.valles)
ross.valles$site<- substr(ross.valles$plot.id, 1, 2)
summary(ross.valles)
ross.valles$site<- as.factor(substr(ross.valles$plot.id, 1, 2))
summary(ross.valles)
all.valles<-merge(marcy.valles, ross.valles, by=intersect(names(x)), all.x=T, all.y=T)
all.valles<-merge(marcy.valles, ross.valles, all.x=T, all.y=T)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", ross.ppine,all.valles.site)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine", all.valles$site)
summary(all.valles)
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine", "")
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine", all.valles$site)
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine", all.valles$site)
summary(all.valles)
all.valles<-merge(marcy.valles, ross.valles, all.x=T, all.y=T)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine", all.valles$site)
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles<-merge(marcy.valles, ross.valles, all.x=T, all.y=T)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site==PPINE, "marcy.ppine",
ifelse(all.valles$site==MCON, "marcy.ppine", ""))))
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine",
ifelse(all.valles$site=="MCON", "marcy.ppine", ""))))
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
summary(all.valles)
all.valles<-merge(marcy.valles, ross.valles, all.x=T, all.y=T)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine",
ifelse(all.valles$site=="MCON", "marcy.ppine", ""))))
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine",
ifelse(all.valles$site=="MCON", "marcy.ppine", ""))))
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine",
ifelse(all.valles$site=="MCON", "marcy.ppine", "error"))))
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine",
ifelse(all.valles$site=="MCON", "marcy.ppine", ))))
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine",
ifelse(all.valles$site=="MCON", "marcy.ppine", ""))))
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles<-merge(marcy.valles, ross.valles, all.x=T, all.y=T)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine",
ifelse(all.valles$site=="MCON", "marcy.ppine", ""))))
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles<-merge(marcy.valles, ross.valles, all.x=T, all.y=T)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine", "marcy.ppine")))
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine", "marcy.mcon")))
all.valles$site<-as.factor(all.valles$site)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine", "marcy.mcon")))
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
all.valles<-merge(marcy.valles, ross.valles, all.x=T, all.y=T)
summary(all.valles)
all.valles$site<- ifelse(substr(all.valles$site, 1, 2)=="VL", "ross.ppine",
ifelse(substr(all.valles$site,1,2)=="VU", "ross.mcon",
ifelse(all.valles$site=="PPINE", "marcy.ppine", "marcy.mcon")))
all.valles$site<-as.factor(all.valles$site)
summary(all.valles)
dbh.bins1 <- seq(0, max(all.valles$dbh, na.rm=T), 2)
qplot(x=dbh, data=ross.valles, geom="histogram", breaks=dbh.bins1)+
facet_grid(plot.id ~ .)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=dbh, data=all.valles, geom="histogram", breaks=dbh.bins1)+
facet_grid(plot.id ~ .)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
summary(all.valles)
qplot(x=dbh, data=all.valles, geom="histogram", breaks=dbh.bins1)+
facet_grid(site ~ .)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
qplot(x=dbh, data=all.valles, geom="histogram", breaks=dbh.bins1, fill=species)+
facet_grid(site ~ .)+
theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12)) +
scale_x_continuous(name="DBH") + ggtitle("Size Distribution") #+ scale_fill_manual(values=as.vector(spp.col.tree$Color))
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,1)=="VL",]
ross.mcon <- ross.trees[substr(ross.trees$PlotID,1,1)=="VU",]
summary(ross.pipo)
ross.pipo <- ross.trees[substr(ross.trees$PlotID,1,2)=="VL",]
ross.mcon <- ross.trees[substr(ross.trees$PlotID,1,2)=="VU",]
summary(ross.pipo)
summary(ross.mcon)
marcy.pipo <- read.csv("raw input files/marcy_ppine_2013.csv", header=T)
marcy.mcon <- read.csv("raw input files/marcy_mcon_2012.csv", header=T)
ross.trees <- read.csv("raw input files/tree_metadata_DOE_plus_valles.csv", na.strings=c("", "NA", "#VALUE!", "*"),header=T)
summary(ross.trees)
ross.valles <- ross.trees[substr(ross.trees$PlotID,1,1)=="V",]
# ross.pipo <- ross.trees[c("TreeID", "Species", "DBH..cm."),]
# names(ross.pipo) <- c("tree.id", "species", "dbh")
summary(ross.valles)
ross.valles<- ross.valles[,c("TreeID", "PlotID", "Species","DBH..cm.", "Density..stems.ha.")]
names(ross.valles)<- c("tree.id", "plot.id", "species", "dbh", "density")
summary(ross.valles)
ross.valles$site<- as.factor(substr(ross.valles$plot.id, 1, 2))
summary(ross.valles)
ross.pipo <- ross.trees[substr(ross.valles$PlotID,1,2)=="VL",]
ross.mcon <- ross.trees[substr(ross.valles$PlotID,1,2)=="VU",]
summary(ross.pipo)
summary(ross.mcon)
ross.pipo <- ross.trees[substr(ross.valles$plot.id,1,2)=="VL",]
ross.mcon <- ross.trees[substr(ross.valles$plot.id,1,2)=="VU",]
summary(ross.pipo)
summary(ross.mcon)
summary(ross.valles)
ross.pipo <- ross.valles[substr(ross.valles$plot.id,1,2)=="VL",]
ross.mcon <- ross.valles[substr(ross.valles$plot.id,1,2)=="VU",]
summary(ross.pipo)
summary(ross.mcon)
test <- chisq.test(marcy.pipo, ross.pipo)
test <- chisq.test(marcy.pipo$dbh, ross.pipo$dbh)
test <- t.test(marcy.pipo$dbh, ross.pipo$dbh)
test <- t.test(marcy.pipo$dbh, ross.pipo$dbh, na.rm=T)
test <- t.test(marcy.pipo$DBH_1, ross.pipo$dbh, na.rm=T)
test <- chisq.test(marcy.pipo$DBH_1, ross.pipo$dbh, na.rm=T)
test <- chisq.test(marcy.pipo$DBH_1, ross.pipo$dbh)
summary(test)
test
setwd(/Users/mrossalexander/Desktop/PEcAn\ Allometries/Ross_allometries)
setwd(Users/mrossalexander/Desktop/PEcAn\ Allometries/Ross_allometries)
setwd(~Desktop/PEcAn\ Allometries/Ross_allometries)
setwd(~Desktop/PEcAn/Allometries/Ross_allometries)
setwd("~Desktop/PEcAn/Allometries/Ross_allometries")
setwd("~Desktop/PEcAn Allometries/Ross_allometries")
setwd("~Desktop/PEcAn_Allometries/Ross_allometries")
setwd("/Users/mrossalexander/Desktop/PEcAn_Allometries/Ross_allometries")
load(Allom.PIPO.2.Rdata)
load("Allom.PIPO.2.Rdata")
pipo.allom <-load("Allom.PIPO.2.Rdata")
ls()
pipo.allom <-load("Allom.PIPO.2.Rdata")
