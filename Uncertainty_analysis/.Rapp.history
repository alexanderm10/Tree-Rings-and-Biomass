# Script Querying allometries#
setwd("~/Desktop/pecan/modules/allometry/R")#
#
outdir <- "~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Office#
#outdir <- "~/Desktop/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Laptop#
#
source("AllomAve.R")#
source("query.allom.data.R")#
source("allom.BayesFit.R")#
source("read.allom.data.R")#
# # #
# # PIPO -- the new species#
# # pipo = list(test = data.frame(spcd=122,acronym="PIPO"))#
#
# # Example with just 1 eq#
# #pfts = list(test = data.frame(spcd=91,acronym="PIAB"))#
#
# # Example with multiple Pecan eq#
# #pfts = list(test = data.frame(spcd=202,acronym="PSME"))#
#
# # AllomAve(pipo,2,outdir=file.path(outdir, "TysonOnly"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# # Example with just 1 eq#
# picea = list(test = data.frame(spcd=90,acronym="PICEA"))#
#
# AllomAve(picea,2,outdir=file.path(outdir, "March19"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# Species level equation "if available" for Ross and Marcy Valles Data'#
valles.sp = list(PIPO = data.frame(spcd=122, acronym="PIPO"),#
              PIEN = data.frame(spcd=93, acronym="PIEN"),#
              PSME = data.frame(spcd=202, acronym="PSME"),#
              ABCO = data.frame(spcd=15, acronym = "ABCO"))#
AllomAve(valles.sp,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.vRoss.csv",ngibbs=1000)#
#
valles.sp2 = list(PIPO = data.frame(spcd=122, acronym="PIPO"))#
AllomAve(valles.sp2,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.vRoss.csv",ngibbs=1000)#
#
# Genus level equations for Ross's valles data'#
valles.genus = list(pinus.sp = data.frame(spcd=100, acronym="PINUS"),#
                 picea.sp = data.frame(spcd=90, acronym="PICEA"),#
                 abies.sp = data.frame(spcd=10, acronym="ABIES"))#
AllomAve(valles.genus,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.vRoss.csv",ngibbs=1000)#
#
valles.genus2 = list(picea.sp = data.frame(spcd=90, acronym="PICEA"))#
AllomAve(valles.genus2,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.vRoss.csv",ngibbs=1000)#
#
#making up our own PFT's, just need a species--query simon's database adn cross list based on christy's code#
pfts = list(PFT.TITLE = data.frame(spcd=PFT.TITLE$spcd,acronym=PFT.TITLE$acronym))
# Script Querying allometries#
setwd("~/Desktop/pecan/modules/allometry/R")#
#
outdir <- "~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Office#
#outdir <- "~/Desktop/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Laptop#
#
source("AllomAve.R")#
source("query.allom.data.R")#
source("allom.BayesFit.R")#
source("read.allom.data.R")#
# # #
# # PIPO -- the new species#
# # pipo = list(test = data.frame(spcd=122,acronym="PIPO"))#
#
# # Example with just 1 eq#
# #pfts = list(test = data.frame(spcd=91,acronym="PIAB"))#
#
# # Example with multiple Pecan eq#
# #pfts = list(test = data.frame(spcd=202,acronym="PSME"))#
#
# # AllomAve(pipo,2,outdir=file.path(outdir, "TysonOnly"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# # Example with just 1 eq#
# picea = list(test = data.frame(spcd=90,acronym="PICEA"))#
#
# AllomAve(picea,2,outdir=file.path(outdir, "March19"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# Species level equation "if available" for Ross and Marcy Valles Data'#
valles.sp = list(PIPO = data.frame(spcd=122, acronym="PIPO"),#
              PIEN = data.frame(spcd=93, acronym="PIEN"),#
              PSME = data.frame(spcd=202, acronym="PSME"),#
              ABCO = data.frame(spcd=15, acronym = "ABCO"))#
AllomAve(valles.sp,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.sp2 = list(PIPO = data.frame(spcd=122, acronym="PIPO"))#
AllomAve(valles.sp2,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
# Genus level equations for Ross's valles data'#
valles.genus = list(pinus.sp = data.frame(spcd=100, acronym="PINUS"),#
                 picea.sp = data.frame(spcd=90, acronym="PICEA"),#
                 abies.sp = data.frame(spcd=10, acronym="ABIES"))#
AllomAve(valles.genus,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.genus2 = list(picea.sp = data.frame(spcd=90, acronym="PICEA"))#
AllomAve(valles.genus2,2,outdir="~/Ross_allometries",parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
#making up our own PFT's, just need a species--query simon's database adn cross list based on christy's code#
pfts = list(PFT.TITLE = data.frame(spcd=PFT.TITLE$spcd,acronym=PFT.TITLE$acronym))
# Script Querying allometries#
setwd("~/Desktop/pecan/modules/allometry/R")#
#
outdir <- "~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19" # CR Office#
#outdir <- "~/Desktop/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Laptop#
#
source("AllomAve.R")#
source("query.allom.data.R")#
source("allom.BayesFit.R")#
source("read.allom.data.R")#
# # #
# # PIPO -- the new species#
# # pipo = list(test = data.frame(spcd=122,acronym="PIPO"))#
#
# # Example with just 1 eq#
# #pfts = list(test = data.frame(spcd=91,acronym="PIAB"))#
#
# # Example with multiple Pecan eq#
# #pfts = list(test = data.frame(spcd=202,acronym="PSME"))#
#
# # AllomAve(pipo,2,outdir=file.path(outdir, "TysonOnly"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# # Example with just 1 eq#
# picea = list(test = data.frame(spcd=90,acronym="PICEA"))#
#
# AllomAve(picea,2,outdir=file.path(outdir, "March19"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# Species level equation "if available" for Ross and Marcy Valles Data'#
valles.sp = list(PIPO = data.frame(spcd=122, acronym="PIPO"),#
              PIEN = data.frame(spcd=93, acronym="PIEN"),#
              PSME = data.frame(spcd=202, acronym="PSME"),#
              ABCO = data.frame(spcd=15, acronym = "ABCO"))#
AllomAve(valles.sp,2,outdir=outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.sp2 = list(PIPO = data.frame(spcd=122, acronym="PIPO"))#
AllomAve(valles.sp2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
# Genus level equations for Ross's valles data'#
valles.genus = list(pinus.sp = data.frame(spcd=100, acronym="PINUS"),#
                 picea.sp = data.frame(spcd=90, acronym="PICEA"),#
                 abies.sp = data.frame(spcd=10, acronym="ABIES"))#
AllomAve(valles.genus,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.genus2 = list(picea.sp = data.frame(spcd=90, acronym="PICEA"))#
AllomAve(valles.genus2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
#making up our own PFT's, just need a species--query simon's database adn cross list based on christy's code#
#pfts = list(PFT.TITLE = data.frame(spcd=PFT.TITLE$spcd,acronym=PFT.TITLE$acronym))
# Conversion of diameter reconstruction to biomass#
# Sampling the MCMC output generated by PEcAn to obtain ranges of possible biomass as opposed to a single line#
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19/")#
# creating an object to serve as a home for all of the allometry samples we will pull from the individual species mcmc#
#
allometries<- list()#
#
# Sampling 500 random rows from the last 5000 runs of the MCMC#
#
# need to not pull rows with a negative mu1#
# loading in the MCMC data from PEcAn for PIPO#
load("Allom.PIPO.2.Rdata")#
allometries[["pipo"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
#
summary(allometries)#
summary(allometries$pipo)#
#
# loading in PSME pecan mcmc runs and making a PSME section within the allometries list. This will be repeate for all species present in the DOE study.#
load("Allom.PSME.2.Rdata")#
allometries[["psme"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$psme)#
#
# loading in ABCO pecan mcmc runs#
load("Allom.ABCO.2.Rdata")#
allometries[["abco"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abco)#
# loading in general spruce pecan mcmc runs#
load("Allom.picea.sp.2.Rdata")#
allometries[["picea.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$picea.sp)#
#
# loading in general pine pecan mcmc runs#
load("Allom.pinus.sp.2.Rdata")#
allometries[["pinus.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$pinus.sp)#
#
# loading in general fir pecan mcmc runs#
load("Allom.abies.sp.2.Rdata")#
allometries[["abies.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abies.sp)#
#save the list as ______ to draw from later when we convert diameter reconstructions into biomass#
save(allometries, file="allometries_list.Rdata")
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis")#
#
library(dplR)#
library(ggplot2)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
# Run this script after the gap filling process scripts have been run#
# For the NACP15 abstract run Tree_rw_gapfilled.csv#
# load in the diameter reconstructions generated by Christy.  These are based upon gapfilled tree ring data using the fancy model.#
#
g.filled.diam <- read.csv("gap_filled_dbh.recon.csv", header=T, row.names=1)#
g.filled.diam <- g.filled.diam[,substr(names(g.filled.diam),1,1)=="V"]#
summary(g.filled.diam)#
#
# read in tree data#
tree.data <- read.csv("TreeData.csv", header=T)#
summary(tree.data)#
#trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V" | substr(tree.data$PlotID, 1, 2)=="MM",]#
trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V",]#
summary(trees.use)#
#
#quick plot#
spag.plot(g.filled.diam)#
#
plot.data <- read.csv("raw input files/DOE_plus_Valles.csv")#
summary(plot.data)
###########################################################################
# Allometric Equations#
###########################################################################
#Convert to biomass with the allometric equation#
#using the PECAN generated bayesian equations#
library(car)#
#
# Getting rid of POTR for now for conceptual figure purposes#
trees.use <- trees.use[!(trees.use$Species=="POTR"),]#
summary(trees.use)#
unique(trees.use$Species)#
#
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='picea.sp'; 'PIPO'='pipo'; 'PSME'='psme'")#
summary(trees.use)#
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet#
# will want to do general equations and pft level equations as well, but later#
# log(AGB) = mu0 + mu1*log(DBH) --equaton form of PECAN allometrics#
#
#allom.eq <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}#
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}#
#
# dbh <- 1:50#
# test <- allom.eq(mu0= -3.5185,#
#                  mu1 = 2.6909,#
#                  DBH = dbh)#
# #
# plot(test*.09 ~ dbh)#
#
allom.temp <- g.filled.diam#
allom.temp[,] <- NA#
#
# dbh=0 causes problems, so we're going to make those NA#
g.filled.diam[g.filled.diam==0] <- 1e-6#
min(g.filled.diam, na.rm=T)#
summary(g.filled.diam)#
dim(g.filled.diam)#
#
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))#
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added#
#
summary(bm.array[,,1])#
#--------------------------------------------------#
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC#
# This is one big loop that goes through each layer of the 500 iterations#
#--------------------------------------------------#
for(i in 1:nrow(allometries[[1]])){#
  allom.temp <- g.filled.diam#
  allom.temp[,] <- NA#
# Species loop for calculating tree biomass#
for(j in unique(trees.use$spp.allom)){#
  cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])#
  # Note: we'll have to make this a bit fancier in the future for species with mu0==0#
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,#
#                          mu1 = 2.6909,#
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))#
#                          DBH = g.filled.diam[,cols])#
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),#
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),#
#                               DBH = g.filled.diam[,cols])#
  mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])#
  mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])#
  allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])#
}#
# summing to the plot level#
#
allom.temp[is.na(allom.temp)] <- 0#
#
# biomass loop for summing trees to plots#
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here#
for(p in 1:length(plots)){#
  cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])#
  if(substr(plots[p],1,1)=="V"){#
    bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)#
  } else {#
    temp <- allom.temp[,cols]#
    for(t in names(temp)){ # Convert biomass/tree to biomass/ha#
      temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000#
      }#
    bm.array[,p,i] <- rowSums(temp) #sum biomass/ha#
    }#
}#
}#
#--------------------------------------------------#
#
#bm.array[,,1]#
summary(bm.array[,,1])
# OFFENDER: VUF032; VUF026 is good#
g.filled.diam[,c("VUF026","VUF032")]#
#
### OUTSIDE of all LOOPs (iteration + species + plots)#
# You should now have a 3-dimensional array with plots as columns, years as rows, and iterations as layers#
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.sd <- apply(bm.array[,,], c(1,2), sd) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.se <- apply(bm.array[,,], c(1,2), se)#
#
biom.mean <- as.data.frame(biom.mean)#
names(biom.mean)<- plots
biom.sd <- apply(bm.array[,,], c(1,2), quantiles, c(0.025, 0.975)) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.sd <- apply(bm.array[,,], c(1,2), quantile, c(0.025, 0.975)) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running
biom.se <- apply(bm.array[,,], c(1,2), se)
biom.sd
biom.lbound <- biom.sd[1,,]
summary(biom.lbound)
biom.ubound <- biom.sd[2,,]
summary(boim.ubound)
summary(biom.ubound)
summary(biom.mean)
biom.lbound <- biom.sd[1,,]#
names(biom.lbound) <- paste(plots, "LB", sep=".")#
biom.ubound <- biom.sd[2,,]#
names(biom.ubound) <- paste(plots, "UB", sep=".")
summary(biom.lbound)
biom.lbound <- data.frame(biom.sd[1,,])#
names(biom.lbound) <- paste(plots, "LB", sep=".")#
biom.ubound <- data.frame(biom.sd[2,,])#
names(biom.ubound) <- paste(plots, "UB", sep=".")
summary(biom.lbound)
biom.valles <- as.data.frame(c(biom.mean, biom.lb, biom.ub))#
row.names(biom.valles) <- row.names(biom.mean)#
summary(biom.valles)#
head(biom.valles)
biom.valles <- as.data.frame(c(biom.mean, biom.lbound, biom.ubound))#
row.names(biom.valles) <- row.names(biom.mean)#
summary(biom.valles)#
head(biom.valles)
biom.valles.stack <- stack(biom.valles[1:4])#
names(biom.valles.stack) <- c("Biom.Mean", "PlotID")#
biom.valles.stack$Year <- as.numeric(paste(row.names(biom.valles)))#
biom.valles.stack$Plot <- as.factor(substr(biom.valles.stack$PlotID, 3,3))#
biom.valles.stack$Site <- as.factor(substr(biom.valles.stack$PlotID, 1,2))#
summary(biom.valles.stack)
biom.valles.stack.sd <- stack(biom.valles[5:8])#
names(biom.valles.stack.sd) <- c("Biom.LB", "PlotID")
biom.valles.stack.lb <- stack(biom.valles[5:8])#
names(biom.valles.stack.lb) <- c("Biom.LB", "PlotID")
summary(biom.valles.stack.lb)
biom.valles.stack.ub <- stack(biom.valles[9:12])#
names(biom.valles.stack.ub) <- c("Biom.UB", "PlotID")
biom.valles.stack$Biom.LB <- biom.valles.stack.sd[,1]#
biom.valles.stack$Biom.UB <- biom.valles.stack.se[,1]#
summary(biom.valles.stack)
biom.valles.stack$Biom.LB <- biom.valles.stack.lb[,1]#
biom.valles.stack$Biom.UB <- biom.valles.stack.ub[,1]#
summary(biom.valles.stack)
summary(biom.valles.stack)
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
# Script Querying allometries#
setwd("~/Desktop/pecan/modules/allometry/R")#
#
outdir <- "~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19" # CR Office#
#outdir <- "~/Desktop/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Laptop#
#
source("AllomAve.R")#
source("query.allom.data.R")#
source("allom.BayesFit.R")#
source("read.allom.data.R")#
# # #
# # PIPO -- the new species#
# # pipo = list(test = data.frame(spcd=122,acronym="PIPO"))#
#
# # Example with just 1 eq#
# #pfts = list(test = data.frame(spcd=91,acronym="PIAB"))#
#
# # Example with multiple Pecan eq#
# #pfts = list(test = data.frame(spcd=202,acronym="PSME"))#
#
# # AllomAve(pipo,2,outdir=file.path(outdir, "TysonOnly"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# # Example with just 1 eq#
# picea = list(test = data.frame(spcd=90,acronym="PICEA"))#
#
# AllomAve(picea,2,outdir=file.path(outdir, "March19"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# Species level equation "if available" for Ross and Marcy Valles Data'#
valles.sp = list(PIPO = data.frame(spcd=122, acronym="PIPO"),#
              PIEN = data.frame(spcd=93, acronym="PIEN"),#
              PSME = data.frame(spcd=202, acronym="PSME"),#
              ABCO = data.frame(spcd=15, acronym = "ABCO"))#
AllomAve(valles.sp,2,outdir=outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.sp2 = list(PIPO = data.frame(spcd=122, acronym="PIPO"))#
AllomAve(valles.sp2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
# Genus level equations for Ross's valles data'#
valles.genus = list(pinus.sp = data.frame(spcd=100, acronym="PINUS"),#
                 picea.sp = data.frame(spcd=90, acronym="PICEA"),#
                 abies.sp = data.frame(spcd=10, acronym="ABIES"))#
AllomAve(valles.genus,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.genus2 = list(picea.sp = data.frame(spcd=90, acronym="PICEA"))#
AllomAve(valles.genus2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
#making up our own PFT's, just need a species--query simon's database adn cross list based on christy's code#
#pfts = list(PFT.TITLE = data.frame(spcd=PFT.TITLE$spcd,acronym=PFT.TITLE$acronym))
# Conversion of diameter reconstruction to biomass#
# Sampling the MCMC output generated by PEcAn to obtain ranges of possible biomass as opposed to a single line#
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19/")#
# creating an object to serve as a home for all of the allometry samples we will pull from the individual species mcmc#
#
allometries<- list()#
#
# Sampling 500 random rows from the last 5000 runs of the MCMC#
#
# need to not pull rows with a negative mu1#
# loading in the MCMC data from PEcAn for PIPO#
load("Allom.PIPO.2.Rdata")#
allometries[["pipo"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
#
summary(allometries)#
summary(allometries$pipo)#
#
# loading in PSME pecan mcmc runs and making a PSME section within the allometries list. This will be repeate for all species present in the DOE study.#
load("Allom.PSME.2.Rdata")#
allometries[["psme"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$psme)#
#
# loading in ABCO pecan mcmc runs#
load("Allom.ABCO.2.Rdata")#
allometries[["abco"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abco)#
# loading in general spruce pecan mcmc runs#
load("Allom.picea.sp.2.Rdata")#
allometries[["picea.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$picea.sp)#
#
# loading in general pine pecan mcmc runs#
load("Allom.pinus.sp.2.Rdata")#
allometries[["pinus.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$pinus.sp)#
#
# loading in general fir pecan mcmc runs#
load("Allom.abies.sp.2.Rdata")#
allometries[["abies.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abies.sp)#
#save the list as ______ to draw from later when we convert diameter reconstructions into biomass#
save(allometries, file="allometries_list.Rdata")
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis")#
#
library(dplR)#
library(ggplot2)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
# Run this script after the gap filling process scripts have been run#
# For the NACP15 abstract run Tree_rw_gapfilled.csv#
# load in the diameter reconstructions generated by Christy.  These are based upon gapfilled tree ring data using the fancy model.#
#
g.filled.diam <- read.csv("gap_filled_dbh.recon.csv", header=T, row.names=1)#
g.filled.diam <- g.filled.diam[,substr(names(g.filled.diam),1,1)=="V"]#
summary(g.filled.diam)#
#
# read in tree data#
tree.data <- read.csv("TreeData.csv", header=T)#
summary(tree.data)#
#trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V" | substr(tree.data$PlotID, 1, 2)=="MM",]#
trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V",]#
summary(trees.use)#
#
#quick plot#
spag.plot(g.filled.diam)#
#
plot.data <- read.csv("raw input files/DOE_plus_Valles.csv")#
summary(plot.data)
##########################################################################
# Allometric Equations#
###########################################################################
#Convert to biomass with the allometric equation#
#using the PECAN generated bayesian equations#
library(car)#
#
# Getting rid of POTR for now for conceptual figure purposes#
trees.use <- trees.use[!(trees.use$Species=="POTR"),]#
summary(trees.use)#
unique(trees.use$Species)#
#
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='picea.sp'; 'PIPO'='pipo'; 'PSME'='psme'")#
summary(trees.use)#
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet#
# will want to do general equations and pft level equations as well, but later#
# log(AGB) = mu0 + mu1*log(DBH) --equaton form of PECAN allometrics#
#
#allom.eq <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}#
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}#
#
# dbh <- 1:50#
# test <- allom.eq(mu0= -3.5185,#
#                  mu1 = 2.6909,#
#                  DBH = dbh)#
# #
# plot(test*.09 ~ dbh)#
#
allom.temp <- g.filled.diam#
allom.temp[,] <- NA#
#
# dbh=0 causes problems, so we're going to make those NA#
g.filled.diam[g.filled.diam==0] <- 1e-6#
min(g.filled.diam, na.rm=T)#
summary(g.filled.diam)#
dim(g.filled.diam)#
#
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))#
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added#
#
summary(bm.array[,,1])#
#--------------------------------------------------#
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC#
# This is one big loop that goes through each layer of the 500 iterations#
#--------------------------------------------------#
for(i in 1:nrow(allometries[[1]])){#
  allom.temp <- g.filled.diam#
  allom.temp[,] <- NA#
# Species loop for calculating tree biomass#
for(j in unique(trees.use$spp.allom)){#
  cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])#
  # Note: we'll have to make this a bit fancier in the future for species with mu0==0#
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,#
#                          mu1 = 2.6909,#
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))#
#                          DBH = g.filled.diam[,cols])#
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),#
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),#
#                               DBH = g.filled.diam[,cols])#
  mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])#
  mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])#
  allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])#
}#
# summing to the plot level#
#
allom.temp[is.na(allom.temp)] <- 0#
#
# biomass loop for summing trees to plots#
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here#
for(p in 1:length(plots)){#
  cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])#
  if(substr(plots[p],1,1)=="V"){#
    bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)#
  } else {#
    temp <- allom.temp[,cols]#
    for(t in names(temp)){ # Convert biomass/tree to biomass/ha#
      temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000#
      }#
    bm.array[,p,i] <- rowSums(temp) #sum biomass/ha#
    }#
}#
}
#--------------------------------------------------#
#
#bm.array[,,1]#
summary(bm.array[,,1])#
#
# OFFENDER: VUF032; VUF026 is good#
g.filled.diam[,c("VUF026","VUF032")]#
#
### OUTSIDE of all LOOPs (iteration + species + plots)#
# You should now have a 3-dimensional array with plots as columns, years as rows, and iterations as layers#
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.sd <- apply(bm.array[,,], c(1,2), quantile, c(0.025, 0.975)) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.se <- apply(bm.array[,,], c(1,2), se)#
#
biom.mean <- as.data.frame(biom.mean)#
names(biom.mean)<- plots#
#
biom.lbound <- data.frame(biom.sd[1,,])#
names(biom.lbound) <- paste(plots, "LB", sep=".")#
biom.ubound <- data.frame(biom.sd[2,,])#
names(biom.ubound) <- paste(plots, "UB", sep=".")#
# biom.sd <-as.data.frame(biom.sd)#
# names(biom.sd)<- c(paste(plots, "sd", sep="."))#
# biom.se <-as.data.frame(biom.se)#
# names(biom.se)<- c(paste(plots, "se", sep="."))#
biom.valles <- as.data.frame(c(biom.mean, biom.lbound, biom.ubound))#
row.names(biom.valles) <- row.names(biom.mean)#
summary(biom.valles)#
head(biom.valles)#
#
#save(biom.valles, file="biom.valles_cum.csv")#
#
#---------------------------------------------------------------------#
# This we did in a loop above to make it mroe flexible for the future#
# (and we did it right this time)#
#---------------------------------------------------------------------#
# biom.valles.cum.dens <- biom.valles#
# #
# biom.valles.cum.dens$VLA <- biom.valles.cum.dens$VLA / 144/1000#
# biom.valles.cum.dens$VLA.sd <- biom.valles.cum.dens$VLA.sd /144/1000#
# biom.valles.cum.dens$VLA.se <- biom.valles.cum.dens$VLA.se /144/1000#
# #
# biom.valles.cum.dens$VLB <- biom.valles.cum.dens$VLB /624/1000#
# biom.valles.cum.dens$VLB.sd <- biom.valles.cum.dens$VLB.sd /624/1000#
# biom.valles.cum.dens$VLB.se <- biom.valles.cum.dens$VLB.se /624/1000#
# #
# biom.valles.cum.dens$VUA <- biom.valles.cum.dens$VUA /576/1000#
# biom.valles.cum.dens$VUA.sd <- biom.valles.cum.dens$VUA.sd /576/1000#
# biom.valles.cum.dens$VUA.se <- biom.valles.cum.dens$VUA.se /576/1000#
# #
# biom.valles.cum.dens$VUB <- biom.valles.cum.dens$VUB /576/1000#
# biom.valles.cum.dens$VUB.sd <- biom.valles.cum.dens$VUB.sd /576/1000#
# biom.valles.cum.dens$VUB.se <- biom.valles.cum.dens$VUB.se /576/1000#
# #
# summary(biom.valles.cum.dens)#
# biom.valles.cum.dens$year <- as.factor(row.names(biom.valles.cum.dens))#
# head(biom.valles.cum.dens)#
#
# now we have biomass per m^2 for each plot with SD#
#---------------------------------------------------------------------#
#
#save(biom.valles.cum.dens, file="biom_valles_dum_m2.csv")#
#
biom.valles.stack <- stack(biom.valles[1:4])#
names(biom.valles.stack) <- c("Biom.Mean", "PlotID")#
biom.valles.stack$Year <- as.numeric(paste(row.names(biom.valles)))#
biom.valles.stack$Plot <- as.factor(substr(biom.valles.stack$PlotID, 3,3))#
biom.valles.stack$Site <- as.factor(substr(biom.valles.stack$PlotID, 1,2))#
summary(biom.valles.stack)#
#
biom.valles.stack.lb <- stack(biom.valles[5:8])#
names(biom.valles.stack.lb) <- c("Biom.LB", "PlotID")#
#
biom.valles.stack.ub <- stack(biom.valles[9:12])#
names(biom.valles.stack.ub) <- c("Biom.UB", "PlotID")#
#
biom.valles.stack$Biom.LB <- biom.valles.stack.lb[,1]#
biom.valles.stack$Biom.UB <- biom.valles.stack.ub[,1]#
summary(biom.valles.stack)#
#
# biom.valles.stack$Ribbon.max <- biom.valles.stack$Biom.Mean + biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- biom.valles.stack$Biom.Mean - biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- ifelse(biom.valles.stack$Ribbon.min < 0, 0, biom.valles.stack$Ribbon.min)#
# biom.valles.stack$Ribbon.max <- ifelse(biom.valles.stack$Ribbon.max > 100, 100, biom.valles.stack$Ribbon.max)#
summary(biom.valles.stack)#
#
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Lower (PIPO)")
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Upper (MCON)")
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$PlotID=="VUB"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Upper (MCON)")
# Script Querying allometries#
setwd("~/Desktop/pecan/modules/allometry/R")#
#
outdir <- "~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19" # CR Office#
#outdir <- "~/Desktop/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Laptop#
#
source("AllomAve.R")#
source("query.allom.data.R")#
source("allom.BayesFit.R")#
source("read.allom.data.R")#
# # #
# # PIPO -- the new species#
# # pipo = list(test = data.frame(spcd=122,acronym="PIPO"))#
#
# # Example with just 1 eq#
# #pfts = list(test = data.frame(spcd=91,acronym="PIAB"))#
#
# # Example with multiple Pecan eq#
# #pfts = list(test = data.frame(spcd=202,acronym="PSME"))#
#
# # AllomAve(pipo,2,outdir=file.path(outdir, "TysonOnly"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# # Example with just 1 eq#
# picea = list(test = data.frame(spcd=90,acronym="PICEA"))#
#
# AllomAve(picea,2,outdir=file.path(outdir, "March19"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# Species level equation "if available" for Ross and Marcy Valles Data'#
valles.sp = list(PIPO = data.frame(spcd=122, acronym="PIPO"),#
              PIEN = data.frame(spcd=93, acronym="PIEN"),#
              PSME = data.frame(spcd=202, acronym="PSME"),#
              ABCO = data.frame(spcd=15, acronym = "ABCO"))#
AllomAve(valles.sp,2,outdir=outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.sp2 = list(PIPO = data.frame(spcd=122, acronym="PIPO"))#
AllomAve(valles.sp2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
# Genus level equations for Ross's valles data'#
valles.genus = list(pinus.sp = data.frame(spcd=100, acronym="PINUS"),#
                 picea.sp = data.frame(spcd=90, acronym="PICEA"),#
                 abies.sp = data.frame(spcd=10, acronym="ABIES"))#
AllomAve(valles.genus,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.genus2 = list(picea.sp = data.frame(spcd=90, acronym="PICEA"))#
AllomAve(valles.genus2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
#making up our own PFT's, just need a species--query simon's database adn cross list based on christy's code#
#pfts = list(PFT.TITLE = data.frame(spcd=PFT.TITLE$spcd,acronym=PFT.TITLE$acronym))
# Conversion of diameter reconstruction to biomass#
# Sampling the MCMC output generated by PEcAn to obtain ranges of possible biomass as opposed to a single line#
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19/")#
# creating an object to serve as a home for all of the allometry samples we will pull from the individual species mcmc#
#
allometries<- list()#
#
# Sampling 500 random rows from the last 5000 runs of the MCMC#
#
# need to not pull rows with a negative mu1#
# loading in the MCMC data from PEcAn for PIPO#
load("Allom.PIPO.2.Rdata")#
allometries[["pipo"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
#
summary(allometries)#
summary(allometries$pipo)#
#
# loading in PSME pecan mcmc runs and making a PSME section within the allometries list. This will be repeate for all species present in the DOE study.#
load("Allom.PSME.2.Rdata")#
allometries[["psme"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$psme)#
#
# loading in ABCO pecan mcmc runs#
load("Allom.ABCO.2.Rdata")#
allometries[["abco"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abco)#
# loading in general spruce pecan mcmc runs#
load("Allom.picea.sp.2.Rdata")#
allometries[["picea.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$picea.sp)#
#
# loading in general pine pecan mcmc runs#
load("Allom.pinus.sp.2.Rdata")#
allometries[["pinus.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$pinus.sp)#
#
# loading in general fir pecan mcmc runs#
load("Allom.abies.sp.2.Rdata")#
allometries[["abies.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abies.sp)#
#save the list as ______ to draw from later when we convert diameter reconstructions into biomass#
save(allometries, file="allometries_list.Rdata")
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis")#
#
library(dplR)#
library(ggplot2)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
# Run this script after the gap filling process scripts have been run#
# For the NACP15 abstract run Tree_rw_gapfilled.csv#
# load in the diameter reconstructions generated by Christy.  These are based upon gapfilled tree ring data using the fancy model.#
#
g.filled.diam <- read.csv("gap_filled_dbh.recon.csv", header=T, row.names=1)#
g.filled.diam <- g.filled.diam[,substr(names(g.filled.diam),1,1)=="V"]#
summary(g.filled.diam)#
#
# read in tree data#
tree.data <- read.csv("TreeData.csv", header=T)#
summary(tree.data)#
#trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V" | substr(tree.data$PlotID, 1, 2)=="MM",]#
trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V",]#
summary(trees.use)#
#
#quick plot#
#spag.plot(g.filled.diam)#
#
plot.data <- read.csv("raw input files/DOE_plus_Valles.csv")#
summary(plot.data)#
###########################################################################
# Allometric Equations#
###########################################################################
#Convert to biomass with the allometric equation#
#using the PECAN generated bayesian equations#
library(car)#
#
# Getting rid of POTR for now for conceptual figure purposes#
trees.use <- trees.use[!(trees.use$Species=="POTR"),]#
summary(trees.use)#
unique(trees.use$Species)#
#
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='picea.sp'; 'PIPO'='pipo'; 'PSME'='psme'")#
summary(trees.use)#
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet#
# will want to do general equations and pft level equations as well, but later#
# log(AGB) = mu0 + mu1*log(DBH) --equaton form of PECAN allometrics#
#
#allom.eq <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}#
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}#
#
# dbh <- 1:50#
# test <- allom.eq(mu0= -3.5185,#
#                  mu1 = 2.6909,#
#                  DBH = dbh)#
# #
# plot(test*.09 ~ dbh)#
#
allom.temp <- g.filled.diam#
allom.temp[,] <- NA#
#
# dbh=0 causes problems, so we're going to make those NA#
g.filled.diam[g.filled.diam==0] <- 1e-6#
min(g.filled.diam, na.rm=T)#
summary(g.filled.diam)#
dim(g.filled.diam)#
#
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))#
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added#
#
summary(bm.array[,,1])#
#--------------------------------------------------#
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC#
# This is one big loop that goes through each layer of the 500 iterations#
#--------------------------------------------------#
for(i in 1:nrow(allometries[[1]])){#
  allom.temp <- g.filled.diam#
  allom.temp[,] <- NA#
# Species loop for calculating tree biomass#
for(j in unique(trees.use$spp.allom)){#
  cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])#
  # Note: we'll have to make this a bit fancier in the future for species with mu0==0#
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,#
#                          mu1 = 2.6909,#
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))#
#                          DBH = g.filled.diam[,cols])#
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),#
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),#
#                               DBH = g.filled.diam[,cols])#
  mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])#
  mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])#
  allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])#
}#
# summing to the plot level#
#
allom.temp[is.na(allom.temp)] <- 0#
#
# biomass loop for summing trees to plots#
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here#
for(p in 1:length(plots)){#
  cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])#
  if(substr(plots[p],1,1)=="V"){#
    bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)#
  } else {#
    temp <- allom.temp[,cols]#
    for(t in names(temp)){ # Convert biomass/tree to biomass/ha#
      temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000#
      }#
    bm.array[,p,i] <- rowSums(temp) #sum biomass/ha#
    }#
}#
}#
#--------------------------------------------------#
#
#bm.array[,,1]#
summary(bm.array[,,1])#
#
# OFFENDER: VUF032; VUF026 is good#
g.filled.diam[,c("VUF026","VUF032")]#
#
### OUTSIDE of all LOOPs (iteration + species + plots)#
# You should now have a 3-dimensional array with plots as columns, years as rows, and iterations as layers#
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.sd <- apply(bm.array[,,], c(1,2), quantile, c(0.025, 0.975)) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.se <- apply(bm.array[,,], c(1,2), se)#
#
biom.mean <- as.data.frame(biom.mean)#
names(biom.mean)<- plots#
#
biom.lbound <- data.frame(biom.sd[1,,])#
names(biom.lbound) <- paste(plots, "LB", sep=".")#
biom.ubound <- data.frame(biom.sd[2,,])#
names(biom.ubound) <- paste(plots, "UB", sep=".")#
# biom.sd <-as.data.frame(biom.sd)#
# names(biom.sd)<- c(paste(plots, "sd", sep="."))#
# biom.se <-as.data.frame(biom.se)#
# names(biom.se)<- c(paste(plots, "se", sep="."))#
biom.valles <- as.data.frame(c(biom.mean, biom.lbound, biom.ubound))#
row.names(biom.valles) <- row.names(biom.mean)#
summary(biom.valles)#
head(biom.valles)#
#
#save(biom.valles, file="biom.valles_cum.csv")#
#
#---------------------------------------------------------------------#
# This we did in a loop above to make it mroe flexible for the future#
# (and we did it right this time)#
#---------------------------------------------------------------------#
# biom.valles.cum.dens <- biom.valles#
# #
# biom.valles.cum.dens$VLA <- biom.valles.cum.dens$VLA / 144/1000#
# biom.valles.cum.dens$VLA.sd <- biom.valles.cum.dens$VLA.sd /144/1000#
# biom.valles.cum.dens$VLA.se <- biom.valles.cum.dens$VLA.se /144/1000#
# #
# biom.valles.cum.dens$VLB <- biom.valles.cum.dens$VLB /624/1000#
# biom.valles.cum.dens$VLB.sd <- biom.valles.cum.dens$VLB.sd /624/1000#
# biom.valles.cum.dens$VLB.se <- biom.valles.cum.dens$VLB.se /624/1000#
# #
# biom.valles.cum.dens$VUA <- biom.valles.cum.dens$VUA /576/1000#
# biom.valles.cum.dens$VUA.sd <- biom.valles.cum.dens$VUA.sd /576/1000#
# biom.valles.cum.dens$VUA.se <- biom.valles.cum.dens$VUA.se /576/1000#
# #
# biom.valles.cum.dens$VUB <- biom.valles.cum.dens$VUB /576/1000#
# biom.valles.cum.dens$VUB.sd <- biom.valles.cum.dens$VUB.sd /576/1000#
# biom.valles.cum.dens$VUB.se <- biom.valles.cum.dens$VUB.se /576/1000#
# #
# summary(biom.valles.cum.dens)#
# biom.valles.cum.dens$year <- as.factor(row.names(biom.valles.cum.dens))#
# head(biom.valles.cum.dens)#
#
# now we have biomass per m^2 for each plot with SD#
#---------------------------------------------------------------------#
#
#save(biom.valles.cum.dens, file="biom_valles_dum_m2.csv")#
#
biom.valles.stack <- stack(biom.valles[1:4])#
names(biom.valles.stack) <- c("Biom.Mean", "PlotID")#
biom.valles.stack$Year <- as.numeric(paste(row.names(biom.valles)))#
biom.valles.stack$Plot <- as.factor(substr(biom.valles.stack$PlotID, 3,3))#
biom.valles.stack$Site <- as.factor(substr(biom.valles.stack$PlotID, 1,2))#
summary(biom.valles.stack)#
#
biom.valles.stack.lb <- stack(biom.valles[5:8])#
names(biom.valles.stack.lb) <- c("Biom.LB", "PlotID")#
#
biom.valles.stack.ub <- stack(biom.valles[9:12])#
names(biom.valles.stack.ub) <- c("Biom.UB", "PlotID")#
#
biom.valles.stack$Biom.LB <- biom.valles.stack.lb[,1]#
biom.valles.stack$Biom.UB <- biom.valles.stack.ub[,1]#
summary(biom.valles.stack)#
#
# biom.valles.stack$Ribbon.max <- biom.valles.stack$Biom.Mean + biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- biom.valles.stack$Biom.Mean - biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- ifelse(biom.valles.stack$Ribbon.min < 0, 0, biom.valles.stack$Ribbon.min)#
# biom.valles.stack$Ribbon.max <- ifelse(biom.valles.stack$Ribbon.max > 100, 100, biom.valles.stack$Ribbon.max)#
summary(biom.valles.stack)#
#
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Lower (PIPO)")#
#
#ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +#
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$PlotID=="VUB"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Upper (MCON)")
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +#
#ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$PlotID=="VUB"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Upper (MCON)")
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012,])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Ribbon.min, ymax=Ribbon.max, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
   scale_y_continuous(limits=c(0,1000)) #+
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012,])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
   scale_y_continuous(limits=c(0,1000)) #+
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012,])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
###########################################################################
# Set Directories, load libraries#
###########################################################################
###########################################################################
# Set Directories, load libraries#
###########################################################################
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis")#
#
library(dplR)#
library(ggplot2)#
library(car)#
#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
# Run this script after the gap filling process scripts have been run#
# For the NACP15 abstract run Tree_rw_gapfilled.csv#
###########################################################################
# Doing the Allometry sampling (form allometry_sampling.R)#
###########################################################################
allometries<- list()#
#
###########################################################################
# Sampling the Allometric MCMC#
###########################################################################
# Pecan Only#
load("AllomFiles/Picea/PecanOnly/Allom.test.2.Rdata")#
allom.pecan <- list()#
allom.pecan[["PICEA"]] <- mc[[3]][sample(1:nrow(mc[[3]]), size=50, replace=T),]#
#
# Chajnacky Only#
load("AllomFiles/Picea/ChojnackyOnly/Allom.test.2.Rdata")#
allom.chaj <- list()#
allom.chaj[["PICEA"]] <- mc[[3]][sample(1:nrow(mc[[3]]), size=50, replace=T),]#
#
# Combination of #
load("AllomFiles/Picea/All_Picea/Allom.test.2.Rdata")#
allom.all <- list()#
allom.all[["PICEA"]] <- mc[[3]][sample(1:nrow(mc[[3]]), size=50, replace=T),]
###########################################################################
# Applying the allometrics to a dummy set of dbhs#
###########################################################################
dbh.test <- 1:50#
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}#
allom.eq.tyson <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}#
allom.eq.pecan4 <- function(a, b, c, d, DBH) { a + b*DBH + c*DBH^d}#
allom.eq.pecan2 <- function(a, b, c, d, DBH) { a + b*DBH + c*log(DBH^d)}#
temp.pecan <- array(NA, dim=c(length(1:50), nrow(allom.pecan[["PICEA"]])))#
#temp.pecan.native <- array(NA, dim=c(length(1:50), nrow(allom.pecan[["PICEA"]])))#
temp.chaj <- array(NA, dim=c(length(1:50), nrow(allom.chaj[["PICEA"]])))#
temp.chaj.chaj <- array(NA, dim=c(length(1:50), nrow(allom.chaj[["PICEA"]])))#
temp.all <- array(NA, dim=c(length(1:50), nrow(allom.all[["PICEA"]])))#
# Post-Pecan, Pecan Only#
for(i in 1:ncol(temp.pecan)){#
	mu0 = allom.pecan[["PICEA"]][i,"Bg0"]#
	mu1 = allom.pecan[["PICEA"]][i,"Bg1"]#
	temp.pecan[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
# for(i in 1:ncol(temp.pecan)){#
	# a = -1.1719#
	# b = 0#
	# c = 2.102#
	# d = 1#
	# temp.pecan.native[,i] <- allom.eq.pecan2(a=a, b=b, c=c, d=d, DBH=dbh.test)#
# }#
# Chajnacky in Pecan Eq 4#
for(i in 1:ncol(temp.tyson)){#
	mu0 = allom.chaj[["PICEA"]][i,"Bg0"]#
	mu1 = allom.chaj[["PICEA"]][i,"Bg1"]#
	temp.chaj[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
# Chajnacky Chajnacky Equation#
for(i in 1:ncol(temp.tyson)){#
	mu0 = -3.03#
	mu1 = 2.5567#
	temp.chaj.chaj[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
# Pecan Chajnacky #3 + Pecan #2#
for(i in 1:ncol(temp.tyson)){#
	mu0 = allom.all[["PICEA"]][i,"Bg0"]#
	mu1 = allom.all[["PICEA"]][i,"Bg1"]#
	temp.all[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
pecan.mean <- rowMeans(temp.pecan)#
# pecan.native.mean <- rowMeans(temp.pecan.native)#
chaj.mean <- rowMeans(temp.chaj)#
chaj.chaj.mean <- rowMeans(temp.chaj.chaj)#
all.mean <- rowMeans(temp.all)#
#
max(pecan.mean, pecan.native.mean, chaj.mean, chaj.chaj.mean, all.mean)#
plot.range <- c(min(pecan.mean, pecan.native.mean, chaj.mean, chaj.chaj.mean, all.mean),max(pecan.mean, pecan.native.mean, chaj.mean, chaj.chaj.mean, all.mean))#
#
plot(pecan.mean ~ dbh.test, col="blue", cex=1, pch=19, xlab="dbh (cm)", ylab="kg/tree", main="Picea Allometric Equation Comparison",ylim=plot.range)#
	# points(pecan.native.mean ~ dbh.test, col="red3", cex=1, pch=19)#
	points(chaj.mean ~ dbh.test, col="darkgreen", cex=1, pch=19)#
	points(chaj.chaj.mean ~ dbh.test, col="purple", cex=1, pch=1)#
	points(all.mean ~ dbh.test, col="orange3", cex=1, pch=19)#
legend("topleft", legend=c("Pecan Only", "Pecan pre-Pecan", "Chajnacky, Pecan eq 3", "Chajnacky, Pre-Pecan", "Both, Pecan Eq 3,4"), col=c("blue", "red3", "darkgreen", "purple", "orange3"), pch=19)
###########################################################################
# Set Directories, load libraries#
###########################################################################
###########################################################################
# Set Directories, load libraries#
###########################################################################
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis")#
#
library(dplR)#
library(ggplot2)#
library(car)#
#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
# Run this script after the gap filling process scripts have been run#
# For the NACP15 abstract run Tree_rw_gapfilled.csv#
###########################################################################
# Doing the Allometry sampling (form allometry_sampling.R)#
###########################################################################
allometries<- list()#
#
###########################################################################
# Sampling the Allometric MCMC#
###########################################################################
# Pecan Only#
load("AllomFiles/Picea/PecanOnly/Allom.test.2.Rdata")#
allom.pecan <- list()#
allom.pecan[["PICEA"]] <- mc[[3]][sample(1:nrow(mc[[3]]), size=50, replace=T),]#
#
# Chajnacky Only#
load("AllomFiles/Picea/ChojnackyOnly/Allom.test.2.Rdata")#
allom.chaj <- list()#
allom.chaj[["PICEA"]] <- mc[[3]][sample(1:nrow(mc[[3]]), size=50, replace=T),]#
#
# Combination of #
load("AllomFiles/Picea/All_Picea/Allom.test.2.Rdata")#
allom.all <- list()#
allom.all[["PICEA"]] <- mc[[3]][sample(1:nrow(mc[[3]]), size=50, replace=T),]#
###########################################################################
# Applying the allometrics to a dummy set of dbhs#
###########################################################################
dbh.test <- 1:50#
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}#
allom.eq.tyson <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}#
allom.eq.pecan4 <- function(a, b, c, d, DBH) { a + b*DBH + c*DBH^d}#
allom.eq.pecan2 <- function(a, b, c, d, DBH) { a + b*DBH + c*log(DBH^d)}#
temp.pecan <- array(NA, dim=c(length(1:50), nrow(allom.pecan[["PICEA"]])))#
#temp.pecan.native <- array(NA, dim=c(length(1:50), nrow(allom.pecan[["PICEA"]])))#
temp.chaj <- array(NA, dim=c(length(1:50), nrow(allom.chaj[["PICEA"]])))#
temp.chaj.chaj <- array(NA, dim=c(length(1:50), nrow(allom.chaj[["PICEA"]])))#
temp.all <- array(NA, dim=c(length(1:50), nrow(allom.all[["PICEA"]])))#
# Post-Pecan, Pecan Only#
for(i in 1:ncol(temp.pecan)){#
	mu0 = allom.pecan[["PICEA"]][i,"Bg0"]#
	mu1 = allom.pecan[["PICEA"]][i,"Bg1"]#
	temp.pecan[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
# for(i in 1:ncol(temp.pecan)){#
	# a = -1.1719#
	# b = 0#
	# c = 2.102#
	# d = 1#
	# temp.pecan.native[,i] <- allom.eq.pecan2(a=a, b=b, c=c, d=d, DBH=dbh.test)#
# }#
# Chajnacky in Pecan Eq 4#
for(i in 1:ncol(temp.pecan)){#
	mu0 = allom.chaj[["PICEA"]][i,"Bg0"]#
	mu1 = allom.chaj[["PICEA"]][i,"Bg1"]#
	temp.chaj[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
# Chajnacky Chajnacky Equation#
for(i in 1:ncol(temp.pecan)){#
	mu0 = -3.03#
	mu1 = 2.5567#
	temp.chaj.chaj[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
# Pecan Chajnacky #3 + Pecan #2#
for(i in 1:ncol(temp.pecan)){#
	mu0 = allom.all[["PICEA"]][i,"Bg0"]#
	mu1 = allom.all[["PICEA"]][i,"Bg1"]#
	temp.all[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
pecan.mean <- rowMeans(temp.pecan)#
# pecan.native.mean <- rowMeans(temp.pecan.native)#
chaj.mean <- rowMeans(temp.chaj)#
chaj.chaj.mean <- rowMeans(temp.chaj.chaj)#
all.mean <- rowMeans(temp.all)#
#
max(pecan.mean, pecan.native.mean, chaj.mean, chaj.chaj.mean, all.mean)#
plot.range <- c(min(pecan.mean, pecan.native.mean, chaj.mean, chaj.chaj.mean, all.mean),max(pecan.mean, pecan.native.mean, chaj.mean, chaj.chaj.mean, all.mean))#
#
plot(pecan.mean ~ dbh.test, col="blue", cex=1, pch=19, xlab="dbh (cm)", ylab="kg/tree", main="Picea Allometric Equation Comparison",ylim=plot.range)#
	# points(pecan.native.mean ~ dbh.test, col="red3", cex=1, pch=19)#
	points(chaj.mean ~ dbh.test, col="darkgreen", cex=1, pch=19)#
	points(chaj.chaj.mean ~ dbh.test, col="purple", cex=1, pch=1)#
	points(all.mean ~ dbh.test, col="orange3", cex=1, pch=19)#
legend("topleft", legend=c("Pecan Only", "Pecan pre-Pecan", "Chajnacky, Pecan eq 3", "Chajnacky, Pre-Pecan", "Both, Pecan Eq 3,4"), col=c("blue", "red3", "darkgreen", "purple", "orange3"), pch=19)
max(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean)#
plot.range <- c(min(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean),max(pecan.mean, pecan.native.mean, chaj.mean, chaj.chaj.mean, all.mean))
plot(pecan.mean ~ dbh.test, col="blue", cex=1, pch=19, xlab="dbh (cm)", ylab="kg/tree", main="Picea Allometric Equation Comparison",ylim=plot.range)#
	# points(pecan.native.mean ~ dbh.test, col="red3", cex=1, pch=19)#
	points(chaj.mean ~ dbh.test, col="darkgreen", cex=1, pch=19)#
	points(chaj.chaj.mean ~ dbh.test, col="purple", cex=1, pch=1)#
	points(all.mean ~ dbh.test, col="orange3", cex=1, pch=19)#
legend("topleft", legend=c("Pecan Only", "Chajnacky, Pecan eq 3", "Chajnacky, Pre-Pecan", "Both, Pecan Eq 3,4"), col=c("blue", "darkgreen", "purple", "orange3"), pch=19)
max(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean)#
p.range <- c(min(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean),max(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean))
plot(pecan.mean ~ dbh.test, col="blue", cex=1, pch=19, xlab="dbh (cm)", ylab="kg/tree", main="Picea Allometric Equation Comparison",ylim=p.range)#
	# points(pecan.native.mean ~ dbh.test, col="red3", cex=1, pch=19)#
	points(chaj.mean ~ dbh.test, col="darkgreen", cex=1, pch=19)#
	points(chaj.chaj.mean ~ dbh.test, col="purple", cex=1, pch=1)#
	points(all.mean ~ dbh.test, col="orange3", cex=1, pch=19)#
legend("topleft", legend=c("Pecan Only", "Chajnacky, Pecan eq 3", "Chajnacky, Pre-Pecan", "Both, Pecan Eq 3,4"), col=c("blue", "darkgreen", "purple", "orange3"), pch=19)
# Pecan Chajnacky #3 + Pecan #2#
for(i in 1:ncol(temp.pecan)){#
	mu0 = allom.all[["PICEA"]][i,"mu0"]#
	mu1 = allom.all[["PICEA"]][i,"mu1"]#
	temp.all[,i] <- allom.eq(mu0=mu0, mu1=mu1, DBH=dbh.test)#
}#
#
pecan.mean <- rowMeans(temp.pecan)#
# pecan.native.mean <- rowMeans(temp.pecan.native)#
chaj.mean <- rowMeans(temp.chaj)#
chaj.chaj.mean <- rowMeans(temp.chaj.chaj)#
all.mean <- rowMeans(temp.all)#
#
max(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean)#
p.range <- c(min(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean),max(pecan.mean, chaj.mean, chaj.chaj.mean, all.mean))#
#
plot(pecan.mean ~ dbh.test, col="blue", cex=1, pch=19, xlab="dbh (cm)", ylab="kg/tree", main="Picea Allometric Equation Comparison",ylim=p.range)#
	# points(pecan.native.mean ~ dbh.test, col="red3", cex=1, pch=19)#
	points(chaj.mean ~ dbh.test, col="darkgreen", cex=1, pch=19)#
	points(chaj.chaj.mean ~ dbh.test, col="purple", cex=1, pch=1)#
	points(all.mean ~ dbh.test, col="orange3", cex=1, pch=19)#
legend("topleft", legend=c("Pecan Only", "Chajnacky, Pecan eq 3", "Chajnacky, Pre-Pecan", "Both, Pecan Eq 3,4"), col=c("blue", "darkgreen", "purple", "orange3"), pch=19)
# Script Querying allometries#
setwd("~/Desktop/pecan/modules/allometry/R")#
#
outdir <- "~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19" # CR Office#
#outdir <- "~/Desktop/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Laptop#
#
source("AllomAve.R")#
source("query.allom.data.R")#
source("allom.BayesFit.R")#
source("read.allom.data.R")#
# # #
# # PIPO -- the new species#
# # pipo = list(test = data.frame(spcd=122,acronym="PIPO"))#
#
# # Example with just 1 eq#
# #pfts = list(test = data.frame(spcd=91,acronym="PIAB"))#
#
# # Example with multiple Pecan eq#
# #pfts = list(test = data.frame(spcd=202,acronym="PSME"))#
#
# # AllomAve(pipo,2,outdir=file.path(outdir, "TysonOnly"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# # Example with just 1 eq#
# picea = list(test = data.frame(spcd=90,acronym="PICEA"))#
#
# AllomAve(picea,2,outdir=file.path(outdir, "March19"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# Species level equation "if available" for Ross and Marcy Valles Data'#
valles.sp = list(PIPO = data.frame(spcd=122, acronym="PIPO"),#
              PIEN = data.frame(spcd=93, acronym="PIEN"),#
              PSME = data.frame(spcd=202, acronym="PSME"),#
              ABCO = data.frame(spcd=15, acronym = "ABCO"))#
AllomAve(valles.sp,2,outdir=outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.sp2 = list(PIPO = data.frame(spcd=122, acronym="PIPO"))#
AllomAve(valles.sp2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
# Genus level equations for Ross's valles data'#
valles.genus = list(pinus.sp = data.frame(spcd=100, acronym="PINUS"),#
                 picea.sp = data.frame(spcd=90, acronym="PICEA"),#
                 abies.sp = data.frame(spcd=10, acronym="ABIES"))#
AllomAve(valles.genus,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.genus2 = list(picea.sp = data.frame(spcd=90, acronym="PICEA"))#
AllomAve(valles.genus2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
#making up our own PFT's, just need a species--query simon's database adn cross list based on christy's code#
#pfts = list(PFT.TITLE = data.frame(spcd=PFT.TITLE$spcd,acronym=PFT.TITLE$acronym))
# Conversion of diameter reconstruction to biomass#
# Sampling the MCMC output generated by PEcAn to obtain ranges of possible biomass as opposed to a single line#
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19/")#
# creating an object to serve as a home for all of the allometry samples we will pull from the individual species mcmc#
#
allometries<- list()#
#
# Sampling 500 random rows from the last 5000 runs of the MCMC#
#
# need to not pull rows with a negative mu1#
# loading in the MCMC data from PEcAn for PIPO#
load("Allom.PIPO.2.Rdata")#
allometries[["pipo"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
#
summary(allometries)#
summary(allometries$pipo)#
#
# loading in PSME pecan mcmc runs and making a PSME section within the allometries list. This will be repeate for all species present in the DOE study.#
load("Allom.PSME.2.Rdata")#
allometries[["psme"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$psme)#
#
# loading in ABCO pecan mcmc runs#
load("Allom.ABCO.2.Rdata")#
allometries[["abco"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abco)#
# loading in general spruce pecan mcmc runs#
load("Allom.picea.sp.2.Rdata")#
allometries[["picea.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$picea.sp)#
#
# loading in general pine pecan mcmc runs#
load("Allom.pinus.sp.2.Rdata")#
allometries[["pinus.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$pinus.sp)#
#
# loading in general fir pecan mcmc runs#
load("Allom.abies.sp.2.Rdata")#
allometries[["abies.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abies.sp)#
#save the list as ______ to draw from later when we convert diameter reconstructions into biomass#
save(allometries, file="allometries_list.Rdata")
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis")#
#
library(dplR)#
library(ggplot2)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
# Run this script after the gap filling process scripts have been run#
# For the NACP15 abstract run Tree_rw_gapfilled.csv#
# load in the diameter reconstructions generated by Christy.  These are based upon gapfilled tree ring data using the fancy model.#
#
g.filled.diam <- read.csv("gap_filled_dbh.recon.csv", header=T, row.names=1)#
g.filled.diam <- g.filled.diam[,substr(names(g.filled.diam),1,1)=="V"]#
summary(g.filled.diam)#
#
# read in tree data#
tree.data <- read.csv("TreeData.csv", header=T)#
summary(tree.data)#
#trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V" | substr(tree.data$PlotID, 1, 2)=="MM",]#
trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V",]#
summary(trees.use)#
#
#quick plot#
#spag.plot(g.filled.diam)#
#
plot.data <- read.csv("raw input files/DOE_plus_Valles.csv")#
summary(plot.data)
###########################################################################
# Allometric Equations#
###########################################################################
#Convert to biomass with the allometric equation#
#using the PECAN generated bayesian equations#
library(car)#
#
# Getting rid of POTR for now for conceptual figure purposes#
trees.use <- trees.use[!(trees.use$Species=="POTR"),]#
summary(trees.use)#
unique(trees.use$Species)#
#
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='picea.sp'; 'PIPO'='pipo'; 'PSME'='psme'")#
summary(trees.use)#
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet#
# will want to do general equations and pft level equations as well, but later#
# log(AGB) = mu0 + mu1*log(DBH) --equaton form of PECAN allometrics#
#
#allom.eq <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}#
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}#
#
# dbh <- 1:50#
# test <- allom.eq(mu0= -3.5185,#
#                  mu1 = 2.6909,#
#                  DBH = dbh)#
# #
# plot(test*.09 ~ dbh)#
#
allom.temp <- g.filled.diam#
allom.temp[,] <- NA#
#
# dbh=0 causes problems, so we're going to make those NA#
g.filled.diam[g.filled.diam==0] <- 1e-6#
min(g.filled.diam, na.rm=T)#
summary(g.filled.diam)#
dim(g.filled.diam)#
#
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))#
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added#
#
summary(bm.array[,,1])#
#--------------------------------------------------#
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC#
# This is one big loop that goes through each layer of the 500 iterations#
#--------------------------------------------------#
for(i in 1:nrow(allometries[[1]])){#
  allom.temp <- g.filled.diam#
  allom.temp[,] <- NA#
# Species loop for calculating tree biomass#
for(j in unique(trees.use$spp.allom)){#
  cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])#
  # Note: we'll have to make this a bit fancier in the future for species with mu0==0#
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,#
#                          mu1 = 2.6909,#
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))#
#                          DBH = g.filled.diam[,cols])#
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),#
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),#
#                               DBH = g.filled.diam[,cols])#
  # mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])#
  # mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])#
  mu0=allometries[[j]][i,"Bg0"]#
  mu1=allometries[[j]][i,"Bg1"]#
  allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])#
}#
# summing to the plot level#
#
allom.temp[is.na(allom.temp)] <- 0#
#
# biomass loop for summing trees to plots#
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here#
for(p in 1:length(plots)){#
  cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])#
  if(substr(plots[p],1,1)=="V"){#
    bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)#
  } else {#
    temp <- allom.temp[,cols]#
    for(t in names(temp)){ # Convert biomass/tree to biomass/ha#
      temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000#
      }#
    bm.array[,p,i] <- rowSums(temp) #sum biomass/ha#
    }#
}#
}#
#--------------------------------------------------
#bm.array[,,1]#
summary(bm.array[,,1])#
#
# OFFENDER: VUF032; VUF026 is good#
g.filled.diam[,c("VUF026","VUF032")]#
#
### OUTSIDE of all LOOPs (iteration + species + plots)#
# You should now have a 3-dimensional array with plots as columns, years as rows, and iterations as layers#
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.sd <- apply(bm.array[,,], c(1,2), quantile, c(0.025, 0.975)) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.se <- apply(bm.array[,,], c(1,2), se)#
#
biom.mean <- as.data.frame(biom.mean)#
names(biom.mean)<- plots#
#
biom.lbound <- data.frame(biom.sd[1,,])#
names(biom.lbound) <- paste(plots, "LB", sep=".")#
biom.ubound <- data.frame(biom.sd[2,,])#
names(biom.ubound) <- paste(plots, "UB", sep=".")#
# biom.sd <-as.data.frame(biom.sd)#
# names(biom.sd)<- c(paste(plots, "sd", sep="."))#
# biom.se <-as.data.frame(biom.se)#
# names(biom.se)<- c(paste(plots, "se", sep="."))#
biom.valles <- as.data.frame(c(biom.mean, biom.lbound, biom.ubound))#
row.names(biom.valles) <- row.names(biom.mean)#
summary(biom.valles)#
head(biom.valles)#
#
#save(biom.valles, file="biom.valles_cum.csv")#
#
#---------------------------------------------------------------------#
# This we did in a loop above to make it mroe flexible for the future#
# (and we did it right this time)#
#---------------------------------------------------------------------#
# biom.valles.cum.dens <- biom.valles#
# #
# biom.valles.cum.dens$VLA <- biom.valles.cum.dens$VLA / 144/1000#
# biom.valles.cum.dens$VLA.sd <- biom.valles.cum.dens$VLA.sd /144/1000#
# biom.valles.cum.dens$VLA.se <- biom.valles.cum.dens$VLA.se /144/1000#
# #
# biom.valles.cum.dens$VLB <- biom.valles.cum.dens$VLB /624/1000#
# biom.valles.cum.dens$VLB.sd <- biom.valles.cum.dens$VLB.sd /624/1000#
# biom.valles.cum.dens$VLB.se <- biom.valles.cum.dens$VLB.se /624/1000#
# #
# biom.valles.cum.dens$VUA <- biom.valles.cum.dens$VUA /576/1000#
# biom.valles.cum.dens$VUA.sd <- biom.valles.cum.dens$VUA.sd /576/1000#
# biom.valles.cum.dens$VUA.se <- biom.valles.cum.dens$VUA.se /576/1000#
# #
# biom.valles.cum.dens$VUB <- biom.valles.cum.dens$VUB /576/1000#
# biom.valles.cum.dens$VUB.sd <- biom.valles.cum.dens$VUB.sd /576/1000#
# biom.valles.cum.dens$VUB.se <- biom.valles.cum.dens$VUB.se /576/1000#
# #
# summary(biom.valles.cum.dens)#
# biom.valles.cum.dens$year <- as.factor(row.names(biom.valles.cum.dens))#
# head(biom.valles.cum.dens)#
#
# now we have biomass per m^2 for each plot with SD#
#---------------------------------------------------------------------#
#
#save(biom.valles.cum.dens, file="biom_valles_dum_m2.csv")#
#
biom.valles.stack <- stack(biom.valles[1:4])#
names(biom.valles.stack) <- c("Biom.Mean", "PlotID")#
biom.valles.stack$Year <- as.numeric(paste(row.names(biom.valles)))#
biom.valles.stack$Plot <- as.factor(substr(biom.valles.stack$PlotID, 3,3))#
biom.valles.stack$Site <- as.factor(substr(biom.valles.stack$PlotID, 1,2))#
summary(biom.valles.stack)#
#
biom.valles.stack.lb <- stack(biom.valles[5:8])#
names(biom.valles.stack.lb) <- c("Biom.LB", "PlotID")#
#
biom.valles.stack.ub <- stack(biom.valles[9:12])#
names(biom.valles.stack.ub) <- c("Biom.UB", "PlotID")#
#
biom.valles.stack$Biom.LB <- biom.valles.stack.lb[,1]#
biom.valles.stack$Biom.UB <- biom.valles.stack.ub[,1]#
summary(biom.valles.stack)#
#
# biom.valles.stack$Ribbon.max <- biom.valles.stack$Biom.Mean + biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- biom.valles.stack$Biom.Mean - biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- ifelse(biom.valles.stack$Ribbon.min < 0, 0, biom.valles.stack$Ribbon.min)#
# biom.valles.stack$Ribbon.max <- ifelse(biom.valles.stack$Ribbon.max > 100, 100, biom.valles.stack$Ribbon.max)#
summary(biom.valles.stack)#
#
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Lower (PIPO)")#
#
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +#
#ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$PlotID=="VUB"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Upper (MCON)")
# valles.cum.plot<- #
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012,])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) #
#   theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12))+#
#   scale_fill_discrete(name="Model", labels = c("nt.pipo.mean", "nt.piaz.mean", "nt.pine.spp", "nt.vcnp.mean", "nt.pine.dom.mean")))
# Script Querying allometries#
setwd("~/Desktop/pecan/modules/allometry/R")#
#
outdir <- "~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19" # CR Office#
#outdir <- "~/Desktop/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles" # CR Laptop#
#
source("AllomAve.R")#
source("query.allom.data.R")#
source("allom.BayesFit.R")#
source("read.allom.data.R")#
# # #
# # PIPO -- the new species#
# # pipo = list(test = data.frame(spcd=122,acronym="PIPO"))#
#
# # Example with just 1 eq#
# #pfts = list(test = data.frame(spcd=91,acronym="PIAB"))#
#
# # Example with multiple Pecan eq#
# #pfts = list(test = data.frame(spcd=202,acronym="PSME"))#
#
# # AllomAve(pipo,2,outdir=file.path(outdir, "TysonOnly"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# # Example with just 1 eq#
# picea = list(test = data.frame(spcd=90,acronym="PICEA"))#
#
# AllomAve(picea,2,outdir=file.path(outdir, "March19"),parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=500)#
# Species level equation "if available" for Ross and Marcy Valles Data'#
valles.sp = list(PIPO = data.frame(spcd=122, acronym="PIPO"),#
              PIEN = data.frame(spcd=93, acronym="PIEN"),#
              PSME = data.frame(spcd=202, acronym="PSME"),#
              ABCO = data.frame(spcd=15, acronym = "ABCO"))#
AllomAve(valles.sp,2,outdir=outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.sp2 = list(PIPO = data.frame(spcd=122, acronym="PIPO"))#
AllomAve(valles.sp2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
# Genus level equations for Ross's valles data'#
valles.genus = list(pinus.sp = data.frame(spcd=100, acronym="PINUS"),#
                 picea.sp = data.frame(spcd=90, acronym="PICEA"),#
                 abies.sp = data.frame(spcd=10, acronym="ABIES"))#
AllomAve(valles.genus,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
valles.genus2 = list(picea.sp = data.frame(spcd=90, acronym="PICEA"))#
AllomAve(valles.genus2,2,outdir= outdir,parm="../data/Table3_GTR-NE-319.v2_RossAdendum.csv",ngibbs=1000)#
#
#making up our own PFT's, just need a species--query simon's database adn cross list based on christy's code#
#pfts = list(PFT.TITLE = data.frame(spcd=PFT.TITLE$spcd,acronym=PFT.TITLE$acronym))
# Conversion of diameter reconstruction to biomass#
# Sampling the MCMC output generated by PEcAn to obtain ranges of possible biomass as opposed to a single line#
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis/AllomFiles/March19/")#
# creating an object to serve as a home for all of the allometry samples we will pull from the individual species mcmc#
#
allometries<- list()#
#
# Sampling 500 random rows from the last 5000 runs of the MCMC#
#
# need to not pull rows with a negative mu1#
# loading in the MCMC data from PEcAn for PIPO#
load("Allom.PIPO.2.Rdata")#
allometries[["pipo"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
#
summary(allometries)#
summary(allometries$pipo)#
#
# loading in PSME pecan mcmc runs and making a PSME section within the allometries list. This will be repeate for all species present in the DOE study.#
load("Allom.PSME.2.Rdata")#
allometries[["psme"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$psme)#
#
# loading in ABCO pecan mcmc runs#
load("Allom.ABCO.2.Rdata")#
allometries[["abco"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abco)#
# loading in general spruce pecan mcmc runs#
load("Allom.picea.sp.2.Rdata")#
allometries[["picea.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$picea.sp)#
#
# loading in general pine pecan mcmc runs#
load("Allom.pinus.sp.2.Rdata")#
allometries[["pinus.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$pinus.sp)#
#
# loading in general fir pecan mcmc runs#
load("Allom.abies.sp.2.Rdata")#
allometries[["abies.sp"]] <- mc[[3]][sample(which(mc[[3]][,"mu1"]>=0), size=500, replace=T),]#
summary(allometries)#
summary(allometries$abies.sp)#
#save the list as ______ to draw from later when we convert diameter reconstructions into biomass#
save(allometries, file="allometries_list.Rdata")
setwd("~/Dropbox/PalEON CR/Tree Rings/Tree-Rings-and-Biomass/Uncertainty_analysis")#
#
library(dplR)#
library(ggplot2)#
se <- function(x){#
  sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}#
# Run this script after the gap filling process scripts have been run#
# For the NACP15 abstract run Tree_rw_gapfilled.csv#
# load in the diameter reconstructions generated by Christy.  These are based upon gapfilled tree ring data using the fancy model.#
#
g.filled.diam <- read.csv("gap_filled_dbh.recon.csv", header=T, row.names=1)#
g.filled.diam <- g.filled.diam[,substr(names(g.filled.diam),1,1)=="V"]#
summary(g.filled.diam)#
#
# read in tree data#
tree.data <- read.csv("TreeData.csv", header=T)#
summary(tree.data)#
#trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V" | substr(tree.data$PlotID, 1, 2)=="MM",]#
trees.use <- tree.data[substr(tree.data$PlotID, 1, 1)=="V",]#
summary(trees.use)#
#
#quick plot#
#spag.plot(g.filled.diam)#
#
plot.data <- read.csv("raw input files/DOE_plus_Valles.csv")#
summary(plot.data)#
###########################################################################
# Allometric Equations#
###########################################################################
#Convert to biomass with the allometric equation#
#using the PECAN generated bayesian equations#
library(car)#
#
# Getting rid of POTR for now for conceptual figure purposes#
trees.use <- trees.use[!(trees.use$Species=="POTR"),]#
summary(trees.use)#
unique(trees.use$Species)#
#
trees.use$spp.allom <- recode(trees.use$Species, " 'PIEN'='picea.sp'; 'PIPO'='pipo'; 'PSME'='psme'")#
summary(trees.use)#
plots <- unique(trees.use$PlotID) # You had the right idea, but it was throwing errors because you were trying to evaluate plots you haven't gotten to yet#
# will want to do general equations and pft level equations as well, but later#
# log(AGB) = mu0 + mu1*log(DBH) --equaton form of PECAN allometrics#
#
#allom.eq <- function(mu0, mu1, DBH) { mu0 * DBH^mu1}#
allom.eq <- function(mu0, mu1, DBH) { exp(mu0 + mu1 * log(DBH) )}#
#
# dbh <- 1:50#
# test <- allom.eq(mu0= -3.5185,#
#                  mu1 = 2.6909,#
#                  DBH = dbh)#
# #
# plot(test*.09 ~ dbh)#
#
allom.temp <- g.filled.diam#
allom.temp[,] <- NA#
#
# dbh=0 causes problems, so we're going to make those NA#
g.filled.diam[g.filled.diam==0] <- 1e-6#
min(g.filled.diam, na.rm=T)#
summary(g.filled.diam)#
dim(g.filled.diam)#
#
bm.array <- array(NA, dim=c(nrow(g.filled.diam), length(unique(trees.use$PlotID)), nrow(allometries[[1]])))#
row.names(bm.array) <- row.names(g.filled.diam)  #CRR Added#
#
summary(bm.array[,,1])#
#--------------------------------------------------#
# INSERT i LOOP HERE to go through each iteration of randomness from MCMC#
# This is one big loop that goes through each layer of the 500 iterations#
#--------------------------------------------------#
for(i in 1:nrow(allometries[[1]])){#
  allom.temp <- g.filled.diam#
  allom.temp[,] <- NA#
# Species loop for calculating tree biomass#
for(j in unique(trees.use$spp.allom)){#
  cols <- which(names(g.filled.diam) %in% trees.use[trees.use$spp.allom==j, "TreeID"])#
  # Note: we'll have to make this a bit fancier in the future for species with mu0==0#
#   allom.temp[,cols] <- allom.eq(mu0= -3.5185,#
#                          mu1 = 2.6909,#
#                         #DBH = seq(from=30, to=1, length=nrow(g.filled.diam)))#
#                          DBH = g.filled.diam[,cols])#
# test <- allom.eq(mu0=ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"]),#
#                               mu1 =ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"]),#
#                               DBH = g.filled.diam[,cols])#
  # mu0 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu0"], allometries[[j]][i,"Bg0"])#
  # mu1 = ifelse(!(allometries[[j]][i,"mu0"]==0 & allometries[[j]][i,"mu1"]==0),allometries[[j]][i,"mu1"], allometries[[j]][i,"Bg1"])#
  mu0=allometries[[j]][i,"Bg0"]#
  mu1=allometries[[j]][i,"Bg1"]#
  allom.temp[,cols] <- allom.eq(mu0=mu0, mu1 = mu1, DBH = g.filled.diam[,cols])#
}#
# summing to the plot level#
#
allom.temp[is.na(allom.temp)] <- 0#
#
# biomass loop for summing trees to plots#
# We're doing the unit conversions here; we had calculated density in stems/ha, but Christy wants to look at Biomass in kg/m2, so we're putting everything in kg/m2 here#
for(p in 1:length(plots)){#
  cols <- which(names(allom.temp) %in% trees.use[trees.use$PlotID==plots[p], "TreeID"])#
  if(substr(plots[p],1,1)=="V"){#
    bm.array[,p,i] <- rowMeans(allom.temp[,cols])*plot.data[plot.data$PlotID==paste(plots[p]), "Density.Total..stems.ha."]/10000 #mean tree * trees/ha (do for Valles only bc sum of trees != plot density; different sampling method than Neil)#
  } else {#
    temp <- allom.temp[,cols]#
    for(t in names(temp)){ # Convert biomass/tree to biomass/ha#
      temp[,t] <- temp[,t] * tree.data[tree.data$TreeID==t,"Density..stems.ha."]/10000#
      }#
    bm.array[,p,i] <- rowSums(temp) #sum biomass/ha#
    }#
}#
}#
#--------------------------------------------------#
#
#bm.array[,,1]#
summary(bm.array[,,1])#
#
# OFFENDER: VUF032; VUF026 is good#
g.filled.diam[,c("VUF026","VUF032")]#
#
### OUTSIDE of all LOOPs (iteration + species + plots)#
# You should now have a 3-dimensional array with plots as columns, years as rows, and iterations as layers#
biom.mean <- apply(bm.array[,,], c(1,2), mean) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.sd <- apply(bm.array[,,], c(1,2), quantile, c(0.025, 0.975)) # bm.array==the array you're working with, 3 = do the funciton to the layers (3rd dim), mean = the function you're running#
biom.se <- apply(bm.array[,,], c(1,2), se)#
#
biom.mean <- as.data.frame(biom.mean)#
names(biom.mean)<- plots#
#
biom.lbound <- data.frame(biom.sd[1,,])#
names(biom.lbound) <- paste(plots, "LB", sep=".")#
biom.ubound <- data.frame(biom.sd[2,,])#
names(biom.ubound) <- paste(plots, "UB", sep=".")#
# biom.sd <-as.data.frame(biom.sd)#
# names(biom.sd)<- c(paste(plots, "sd", sep="."))#
# biom.se <-as.data.frame(biom.se)#
# names(biom.se)<- c(paste(plots, "se", sep="."))#
biom.valles <- as.data.frame(c(biom.mean, biom.lbound, biom.ubound))#
row.names(biom.valles) <- row.names(biom.mean)#
summary(biom.valles)#
head(biom.valles)#
#
#save(biom.valles, file="biom.valles_cum.csv")#
#
#---------------------------------------------------------------------#
# This we did in a loop above to make it mroe flexible for the future#
# (and we did it right this time)#
#---------------------------------------------------------------------#
# biom.valles.cum.dens <- biom.valles#
# #
# biom.valles.cum.dens$VLA <- biom.valles.cum.dens$VLA / 144/1000#
# biom.valles.cum.dens$VLA.sd <- biom.valles.cum.dens$VLA.sd /144/1000#
# biom.valles.cum.dens$VLA.se <- biom.valles.cum.dens$VLA.se /144/1000#
# #
# biom.valles.cum.dens$VLB <- biom.valles.cum.dens$VLB /624/1000#
# biom.valles.cum.dens$VLB.sd <- biom.valles.cum.dens$VLB.sd /624/1000#
# biom.valles.cum.dens$VLB.se <- biom.valles.cum.dens$VLB.se /624/1000#
# #
# biom.valles.cum.dens$VUA <- biom.valles.cum.dens$VUA /576/1000#
# biom.valles.cum.dens$VUA.sd <- biom.valles.cum.dens$VUA.sd /576/1000#
# biom.valles.cum.dens$VUA.se <- biom.valles.cum.dens$VUA.se /576/1000#
# #
# biom.valles.cum.dens$VUB <- biom.valles.cum.dens$VUB /576/1000#
# biom.valles.cum.dens$VUB.sd <- biom.valles.cum.dens$VUB.sd /576/1000#
# biom.valles.cum.dens$VUB.se <- biom.valles.cum.dens$VUB.se /576/1000#
# #
# summary(biom.valles.cum.dens)#
# biom.valles.cum.dens$year <- as.factor(row.names(biom.valles.cum.dens))#
# head(biom.valles.cum.dens)#
#
# now we have biomass per m^2 for each plot with SD#
#---------------------------------------------------------------------#
#
#save(biom.valles.cum.dens, file="biom_valles_dum_m2.csv")#
#
biom.valles.stack <- stack(biom.valles[1:4])#
names(biom.valles.stack) <- c("Biom.Mean", "PlotID")#
biom.valles.stack$Year <- as.numeric(paste(row.names(biom.valles)))#
biom.valles.stack$Plot <- as.factor(substr(biom.valles.stack$PlotID, 3,3))#
biom.valles.stack$Site <- as.factor(substr(biom.valles.stack$PlotID, 1,2))#
summary(biom.valles.stack)#
#
biom.valles.stack.lb <- stack(biom.valles[5:8])#
names(biom.valles.stack.lb) <- c("Biom.LB", "PlotID")#
#
biom.valles.stack.ub <- stack(biom.valles[9:12])#
names(biom.valles.stack.ub) <- c("Biom.UB", "PlotID")#
#
biom.valles.stack$Biom.LB <- biom.valles.stack.lb[,1]#
biom.valles.stack$Biom.UB <- biom.valles.stack.ub[,1]#
summary(biom.valles.stack)#
#
# biom.valles.stack$Ribbon.max <- biom.valles.stack$Biom.Mean + biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- biom.valles.stack$Biom.Mean - biom.valles.stack$Biom.SD#
# biom.valles.stack$Ribbon.min <- ifelse(biom.valles.stack$Ribbon.min < 0, 0, biom.valles.stack$Ribbon.min)#
# biom.valles.stack$Ribbon.max <- ifelse(biom.valles.stack$Ribbon.max > 100, 100, biom.valles.stack$Ribbon.max)#
summary(biom.valles.stack)
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VL"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Lower (PIPO)")#
#
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$Site=="VU"),])  + facet_grid(Plot ~ Site) +#
#ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012 & (biom.valles.stack$PlotID=="VUB"),])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) +#
  ggtitle("Valles Caldera Upper (MCON)")
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012,])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID))
pdf("Valles_Biomass_19March_Christy_ChojnackyOnly.pdf", height=8.5, width=11)#
ggplot(data=biom.valles.stack[biom.valles.stack$Year<2012,])  + facet_grid(Plot ~ Site) +#
  # plotting total site basal area  #
  geom_ribbon(aes(x=Year, ymin=Biom.LB, ymax=Biom.UB, fill=PlotID), alpha=0.5) +#
  geom_line(aes(x=Year, y=Biom.Mean, color=PlotID)) #
#   theme(axis.line=element_line(color="black", size=0.5), panel.grid.major=element_blank(), panel.grid.minor= element_blank(), panel.border= element_blank(), panel.background= element_blank(), axis.text.x=element_text(angle=0, color="black", size=12), axis.text.y=element_text(color="black", size=12))+#
#   scale_fill_discrete(name="Model", labels = c("nt.pipo.mean", "nt.piaz.mean", "nt.pine.spp", "nt.vcnp.mean", "nt.pine.dom.mean")))#
dev.off()
